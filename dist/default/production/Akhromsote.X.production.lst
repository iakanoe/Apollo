

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Mar 17 22:25:57 2018

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	text23,global,reloc=2,class=CODE,delta=1
    32                           	psect	text24,global,reloc=2,class=CODE,delta=1
    33                           	psect	text25,global,reloc=2,class=CODE,delta=1
    34                           	psect	text26,global,reloc=2,class=CODE,delta=1
    35                           	psect	text27,global,reloc=2,class=CODE,delta=1
    36                           	psect	text28,global,reloc=2,class=CODE,delta=1
    37                           	psect	text29,global,reloc=2,class=CODE,delta=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    44  0000                     _ADCON1bits	set	4033
    45  0000                     _CCP1CONbits	set	4029
    46  0000                     _CCP2CONbits	set	4026
    47  0000                     _CCPR1L	set	4030
    48  0000                     _CCPR2L	set	4027
    49  0000                     _INTCONbits	set	4082
    50  0000                     _LATAbits	set	3977
    51  0000                     _LATBbits	set	3978
    52  0000                     _LATCbits	set	3979
    53  0000                     _PORTAbits	set	3968
    54  0000                     _PORTBbits	set	3969
    55  0000                     _PORTCbits	set	3970
    56  0000                     _PR2	set	4043
    57  0000                     _T0CON	set	4053
    58  0000                     _T2CON	set	4042
    59  0000                     _TRISAbits	set	3986
    60  0000                     _TRISBbits	set	3987
    61  0000                     _TRISCbits	set	3988
    62                           
    63                           ; #config settings
    64  0000                     
    65                           	psect	cinit
    66  0009A0                     __pcinit:
    67                           	opt stack 0
    68  0009A0                     start_initialization:
    69                           	opt stack 0
    70  0009A0                     __initialization:
    71                           	opt stack 0
    72                           
    73                           ; Clear objects allocated to COMRAM (11 bytes)
    74  0009A0  EE00  F02B         	lfsr	0,__pbssCOMRAM
    75  0009A4  0E0B               	movlw	11
    76  0009A6                     clear_0:
    77  0009A6  6AEE               	clrf	postinc0,c
    78  0009A8  06E8               	decf	wreg,f,c
    79  0009AA  E1FD               	bnz	clear_0
    80  0009AC                     end_of_initialization:
    81                           	opt stack 0
    82  0009AC                     __end_of__initialization:
    83                           	opt stack 0
    84  0009AC  9036               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    85  0009AE  9236               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    86  0009B0  0E00               	movlw	low (__Lmediumconst shr (0+16))
    87  0009B2  6EF8               	movwf	tblptru,c
    88  0009B4  0100               	movlb	0
    89  0009B6  EF6F  F005         	goto	_main	;jump to C main() function
    90                           tblptru	equ	0xFF8
    91                           postinc0	equ	0xFEE
    92                           wreg	equ	0xFE8
    93                           
    94                           	psect	bssCOMRAM
    95  00002B                     __pbssCOMRAM:
    96                           	opt stack 0
    97  00002B                     _millisCounter:
    98                           	opt stack 0
    99  00002B                     	ds	4
   100  00002F                     _fractionCounter:
   101                           	opt stack 0
   102  00002F                     	ds	2
   103  000031                     _status:
   104                           	opt stack 0
   105  000031                     	ds	2
   106  000033                     _targetDirection:
   107                           	opt stack 0
   108  000033                     	ds	2
   109  000035                     _flagStatus:
   110                           	opt stack 0
   111  000035                     	ds	1
   112                           tblptru	equ	0xFF8
   113                           postinc0	equ	0xFEE
   114                           wreg	equ	0xFE8
   115                           
   116                           	psect	cstackCOMRAM
   117  000001                     __pcstackCOMRAM:
   118                           	opt stack 0
   119  000001                     ??_ISR:
   120                           
   121                           ; 1 bytes @ 0x0
   122  000001                     	ds	14
   123  00000F                     ??_switchIR:
   124  00000F                     ?___awdiv:
   125                           	opt stack 0
   126  00000F                     ?_millis:
   127                           	opt stack 0
   128  00000F                     newStatus@x:
   129                           	opt stack 0
   130  00000F                     _getBTNs$716:
   131                           	opt stack 0
   132  00000F                     setLEDR@v:
   133                           	opt stack 0
   134  00000F                     setLEDY@v:
   135                           	opt stack 0
   136  00000F                     setLEDG@v:
   137                           	opt stack 0
   138  00000F                     _getCNYs$1090:
   139                           	opt stack 0
   140  00000F                     _getIRs$1104:
   141                           	opt stack 0
   142  00000F                     getIR@n:
   143                           	opt stack 0
   144  00000F                     setStatus@s:
   145                           	opt stack 0
   146  00000F                     ___awdiv@dividend:
   147                           	opt stack 0
   148                           
   149                           ; 2 bytes @ 0xE
   150  00000F                     	ds	1
   151  000010                     setLEDs@y:
   152                           	opt stack 0
   153  000010                     switchIR@n:
   154                           	opt stack 0
   155                           
   156                           ; 1 bytes @ 0xF
   157  000010                     	ds	1
   158  000011                     setLEDs@g:
   159                           	opt stack 0
   160  000011                     ___awdiv@divisor:
   161                           	opt stack 0
   162                           
   163                           ; 2 bytes @ 0x10
   164  000011                     	ds	1
   165  000012                     setLEDs@r:
   166                           	opt stack 0
   167                           
   168                           ; 1 bytes @ 0x11
   169  000012                     	ds	1
   170  000013                     ___awdiv@counter:
   171                           	opt stack 0
   172                           
   173                           ; 1 bytes @ 0x12
   174  000013                     	ds	1
   175  000014                     ___awdiv@sign:
   176                           	opt stack 0
   177                           
   178                           ; 1 bytes @ 0x13
   179  000014                     	ds	1
   180  000015                     ___awdiv@quotient:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0x14
   184  000015                     	ds	2
   185  000017                     setLeftMotor@speed:
   186                           	opt stack 0
   187  000017                     setRightMotor@speed:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0x16
   191  000017                     	ds	2
   192  000019                     ??_setLeftMotor:
   193  000019                     ??_setRightMotor:
   194                           
   195                           ; 1 bytes @ 0x18
   196  000019                     	ds	2
   197  00001B                     setMotors@left:
   198                           	opt stack 0
   199  00001B                     setBothMotors@speed:
   200                           	opt stack 0
   201                           
   202                           ; 2 bytes @ 0x1A
   203  00001B                     	ds	2
   204  00001D                     setMotors@right:
   205                           	opt stack 0
   206                           
   207                           ; 2 bytes @ 0x1C
   208  00001D                     	ds	2
   209  00001F                     ??_loop:
   210                           
   211                           ; 1 bytes @ 0x1E
   212  00001F                     	ds	4
   213  000023                     loop@next:
   214                           	opt stack 0
   215                           
   216                           ; 4 bytes @ 0x22
   217  000023                     	ds	4
   218  000027                     loop@now:
   219                           	opt stack 0
   220                           
   221                           ; 4 bytes @ 0x26
   222  000027                     	ds	4
   223  00002B                     tblptru	equ	0xFF8
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           
   227                           ; 1 bytes @ 0x2A
   228 ;;
   229 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   230 ;;
   231 ;; *************** function _main *****************
   232 ;; Defined at:
   233 ;;		line 229 in file "main.c"
   234 ;; Parameters:    Size  Location     Type
   235 ;;		None
   236 ;; Auto vars:     Size  Location     Type
   237 ;;		None
   238 ;; Return value:  Size  Location     Type
   239 ;;                  1    wreg      void 
   240 ;; Registers used:
   241 ;;		wreg, status,2, status,0, cstack
   242 ;; Tracked objects:
   243 ;;		On entry : 0/0
   244 ;;		On exit  : 0/0
   245 ;;		Unchanged: 0/0
   246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   247 ;;      Params:         0       0       0       0       0       0       0       0       0
   248 ;;      Locals:         0       0       0       0       0       0       0       0       0
   249 ;;      Temps:          0       0       0       0       0       0       0       0       0
   250 ;;      Totals:         0       0       0       0       0       0       0       0       0
   251 ;;Total ram usage:        0 bytes
   252 ;; Hardware stack levels required when called:    6
   253 ;; This function calls:
   254 ;;		_loop
   255 ;; This function is called by:
   256 ;;		Startup code after reset
   257 ;; This function uses a non-reentrant model
   258 ;;
   259                           
   260                           	psect	text0
   261  000ADE                     __ptext0:
   262                           	opt stack 0
   263  000ADE                     _main:
   264                           	opt stack 25
   265  000ADE  EC0D  F000         	call	_loop	;wreg free
   266  000AE2  D7FD               	goto	l1822
   267  000AE4                     __end_of_main:
   268                           	opt stack 0
   269                           tblptru	equ	0xFF8
   270                           postinc0	equ	0xFEE
   271                           wreg	equ	0xFE8
   272                           
   273 ;; *************** function _loop *****************
   274 ;; Defined at:
   275 ;;		line 47 in file "main.c"
   276 ;; Parameters:    Size  Location     Type
   277 ;;		None
   278 ;; Auto vars:     Size  Location     Type
   279 ;;  now             4   38[COMRAM] unsigned long 
   280 ;;  next            4   34[COMRAM] unsigned long 
   281 ;; Return value:  Size  Location     Type
   282 ;;                  1    wreg      void 
   283 ;; Registers used:
   284 ;;		wreg, status,2, status,0, cstack
   285 ;; Tracked objects:
   286 ;;		On entry : 0/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   290 ;;      Params:         0       0       0       0       0       0       0       0       0
   291 ;;      Locals:         8       0       0       0       0       0       0       0       0
   292 ;;      Temps:          4       0       0       0       0       0       0       0       0
   293 ;;      Totals:        12       0       0       0       0       0       0       0       0
   294 ;;Total ram usage:       12 bytes
   295 ;; Hardware stack levels used:    1
   296 ;; Hardware stack levels required when called:    5
   297 ;; This function calls:
   298 ;;		_getBTN1
   299 ;;		_getBTN2
   300 ;;		_getBTNs
   301 ;;		_getCNYs
   302 ;;		_getIR
   303 ;;		_getIRs
   304 ;;		_getLEDG
   305 ;;		_getLEDR
   306 ;;		_getLEDY
   307 ;;		_initEtc
   308 ;;		_initInterrupts
   309 ;;		_initMotors
   310 ;;		_initSensors
   311 ;;		_initTimer
   312 ;;		_initUI
   313 ;;		_millis
   314 ;;		_newStatus
   315 ;;		_setBothMotors
   316 ;;		_setLEDG
   317 ;;		_setLEDR
   318 ;;		_setLEDY
   319 ;;		_setLEDs
   320 ;;		_setMotors
   321 ;;		_setStatus
   322 ;;		_switchIR
   323 ;; This function is called by:
   324 ;;		_main
   325 ;; This function uses a non-reentrant model
   326 ;;
   327                           
   328                           	psect	text1
   329  00001A                     __ptext1:
   330                           	opt stack 0
   331  00001A                     _loop:
   332                           	opt stack 25
   333                           
   334                           ;main.c: 48: unsigned long now = millis();
   335                           
   336                           ;incstack = 0
   337  00001A  EC02  F005         	call	_millis	;wreg free
   338  00001E  C00F  F027         	movff	?_millis,loop@now
   339  000022  C010  F028         	movff	?_millis+1,loop@now+1
   340  000026  C011  F029         	movff	?_millis+2,loop@now+2
   341  00002A  C012  F02A         	movff	?_millis+3,loop@now+3
   342                           
   343                           ;main.c: 49: unsigned long next = 0;
   344  00002E  0E00               	movlw	0
   345  000030  6E23               	movwf	loop@next,c
   346  000032  0E00               	movlw	0
   347  000034  6E24               	movwf	loop@next+1,c
   348  000036  0E00               	movlw	0
   349  000038  6E25               	movwf	loop@next+2,c
   350  00003A  0E00               	movlw	0
   351  00003C  6E26               	movwf	loop@next+3,c
   352                           
   353                           ;main.c: 50: switch(status){
   354  00003E  D299               	goto	l1816
   355  000040                     l1572:
   356                           
   357                           ;main.c: 52: initEtc();
   358  000040  EC6A  F005         	call	_initEtc	;wreg free
   359                           
   360                           ;main.c: 53: initUI();
   361  000044  EC0B  F005         	call	_initUI	;wreg free
   362                           
   363                           ;main.c: 54: setLEDs(0, 1, 0);
   364  000048  0E01               	movlw	1
   365  00004A  6E10               	movwf	setLEDs@y,c
   366  00004C  0E00               	movlw	0
   367  00004E  6E11               	movwf	setLEDs@g,c
   368  000050  0E00               	movlw	0
   369  000052  ECF7  F004         	call	_setLEDs
   370                           
   371                           ;main.c: 55: initSensors();
   372  000056  EC1D  F005         	call	_initSensors	;wreg free
   373                           
   374                           ;main.c: 56: switchIR(0);
   375  00005A  0E00               	movlw	0
   376  00005C  ECA0  F004         	call	_switchIR
   377                           
   378                           ;main.c: 57: initInterrupts();
   379  000060  EC72  F005         	call	_initInterrupts	;wreg free
   380                           
   381                           ;main.c: 58: initTimer();
   382  000064  EC65  F005         	call	_initTimer	;wreg free
   383                           
   384                           ;main.c: 59: initMotors();
   385  000068  EC66  F004         	call	_initMotors	;wreg free
   386                           
   387                           ;main.c: 60: setStatus(MENU);
   388  00006C  0E00               	movlw	0
   389  00006E  6E10               	movwf	setStatus@s+1,c
   390  000070  0E01               	movlw	1
   391  000072  6E0F               	movwf	setStatus@s,c
   392  000074  EC25  F005         	call	_setStatus	;wreg free
   393                           
   394                           ;main.c: 61: return;
   395  000078  0012               	return	
   396  00007A                     l1590:
   397                           
   398                           ;main.c: 64: if(newStatus()){
   399  00007A  EC41  F005         	call	_newStatus	;wreg free
   400  00007E  0900               	iorlw	0
   401  000080  B4D8               	btfsc	status,2,c
   402  000082  D011               	goto	l1596
   403                           
   404                           ;main.c: 65: setLEDs(0, 0, 0);
   405  000084  0E00               	movlw	0
   406  000086  6E10               	movwf	setLEDs@y,c
   407  000088  0E00               	movlw	0
   408  00008A  6E11               	movwf	setLEDs@g,c
   409  00008C  0E00               	movlw	0
   410  00008E  ECF7  F004         	call	_setLEDs
   411                           
   412                           ;main.c: 66: setMotors(0, 0);
   413  000092  0E00               	movlw	0
   414  000094  6E1C               	movwf	setMotors@left+1,c
   415  000096  0E00               	movlw	0
   416  000098  6E1B               	movwf	setMotors@left,c
   417  00009A  0E00               	movlw	0
   418  00009C  6E1E               	movwf	setMotors@right+1,c
   419  00009E  0E00               	movlw	0
   420  0000A0  6E1D               	movwf	setMotors@right,c
   421  0000A2  ECDD  F004         	call	_setMotors	;wreg free
   422  0000A6                     l1596:
   423                           
   424                           ;main.c: 67: }
   425                           ;main.c: 75: if(getBTN1()){
   426  0000A6  EC5F  F005         	call	_getBTN1	;wreg free
   427  0000AA  0900               	iorlw	0
   428  0000AC  B4D8               	btfsc	status,2,c
   429  0000AE  D007               	goto	l1602
   430                           
   431                           ;main.c: 76: setStatus(CLEAN);
   432  0000B0  0E00               	movlw	0
   433  0000B2  6E10               	movwf	setStatus@s+1,c
   434  0000B4  0E02               	movlw	2
   435  0000B6  6E0F               	movwf	setStatus@s,c
   436  0000B8  EC25  F005         	call	_setStatus	;wreg free
   437                           
   438                           ;main.c: 77: return;
   439  0000BC  0012               	return	
   440  0000BE                     l1602:
   441                           
   442                           ;main.c: 78: }
   443                           ;main.c: 79: if(getBTN2()){
   444  0000BE  EC59  F005         	call	_getBTN2	;wreg free
   445  0000C2  0900               	iorlw	0
   446  0000C4  B4D8               	btfsc	status,2,c
   447  0000C6  0012               	return	
   448  0000C8                     l1606:
   449  0000C8  EC59  F005         	call	_getBTN2	;wreg free
   450  0000CC  0900               	iorlw	0
   451  0000CE  A4D8               	btfss	status,2,c
   452  0000D0  D7FB               	goto	l1606
   453                           
   454                           ;main.c: 81: setStatus(READY);
   455  0000D2  0E00               	movlw	0
   456  0000D4  6E10               	movwf	setStatus@s+1,c
   457  0000D6  0E03               	movlw	3
   458  0000D8  6E0F               	movwf	setStatus@s,c
   459  0000DA  EC25  F005         	call	_setStatus	;wreg free
   460                           
   461                           ;main.c: 83: }
   462                           ;main.c: 84: return;
   463                           
   464                           ;main.c: 82: return;
   465  0000DE  0012               	return	
   466  0000E0                     l1612:
   467                           
   468                           ;main.c: 87: if(newStatus()){
   469  0000E0  EC41  F005         	call	_newStatus	;wreg free
   470  0000E4  0900               	iorlw	0
   471  0000E6  B4D8               	btfsc	status,2,c
   472  0000E8  D011               	goto	l1618
   473                           
   474                           ;main.c: 88: setMotors(1000, 1000);
   475  0000EA  0E03               	movlw	3
   476  0000EC  6E1C               	movwf	setMotors@left+1,c
   477  0000EE  0EE8               	movlw	232
   478  0000F0  6E1B               	movwf	setMotors@left,c
   479  0000F2  0E03               	movlw	3
   480  0000F4  6E1E               	movwf	setMotors@right+1,c
   481  0000F6  0EE8               	movlw	232
   482  0000F8  6E1D               	movwf	setMotors@right,c
   483  0000FA  ECDD  F004         	call	_setMotors	;wreg free
   484                           
   485                           ;main.c: 89: setLEDs(1, 1, 1);
   486  0000FE  0E01               	movlw	1
   487  000100  6E10               	movwf	setLEDs@y,c
   488  000102  0E01               	movlw	1
   489  000104  6E11               	movwf	setLEDs@g,c
   490  000106  0E01               	movlw	1
   491  000108  ECF7  F004         	call	_setLEDs
   492  00010C                     l1618:
   493                           
   494                           ;main.c: 90: }
   495                           ;main.c: 91: if(now >= next){
   496  00010C  5023               	movf	loop@next,w,c
   497  00010E  5C27               	subwf	loop@now,w,c
   498  000110  5024               	movf	loop@next+1,w,c
   499  000112  5828               	subwfb	loop@now+1,w,c
   500  000114  5025               	movf	loop@next+2,w,c
   501  000116  5829               	subwfb	loop@now+2,w,c
   502  000118  5026               	movf	loop@next+3,w,c
   503  00011A  582A               	subwfb	loop@now+3,w,c
   504  00011C  A0D8               	btfss	status,0,c
   505  00011E  D02A               	goto	l1628
   506                           
   507                           ;main.c: 92: next = now + 500;
   508  000120  0EF4               	movlw	244
   509  000122  2427               	addwf	loop@now,w,c
   510  000124  6E23               	movwf	loop@next,c
   511  000126  0E01               	movlw	1
   512  000128  2028               	addwfc	loop@now+1,w,c
   513  00012A  6E24               	movwf	loop@next+1,c
   514  00012C  0E00               	movlw	0
   515  00012E  2029               	addwfc	loop@now+2,w,c
   516  000130  6E25               	movwf	loop@next+2,c
   517  000132  0E00               	movlw	0
   518  000134  202A               	addwfc	loop@now+3,w,c
   519  000136  6E26               	movwf	loop@next+3,c
   520                           
   521                           ;main.c: 93: setLEDR(!getLEDR());
   522  000138  EC4D  F005         	call	_getLEDR	;wreg free
   523  00013C  0900               	iorlw	0
   524  00013E  A4D8               	btfss	status,2,c
   525  000140  D002               	goto	u1390
   526  000142  0E01               	movlw	1
   527  000144  D001               	goto	u1400
   528  000146                     u1390:
   529  000146  0E00               	movlw	0
   530  000148                     u1400:
   531  000148  EC33  F005         	call	_setLEDR
   532                           
   533                           ;main.c: 94: setLEDY(!getLEDY());
   534  00014C  EC47  F005         	call	_getLEDY	;wreg free
   535  000150  0900               	iorlw	0
   536  000152  A4D8               	btfss	status,2,c
   537  000154  D002               	goto	u1410
   538  000156  0E01               	movlw	1
   539  000158  D001               	goto	u1420
   540  00015A                     u1410:
   541  00015A  0E00               	movlw	0
   542  00015C                     u1420:
   543  00015C  EC2C  F005         	call	_setLEDY
   544                           
   545                           ;main.c: 95: setLEDG(!getLEDG());
   546  000160  EC53  F005         	call	_getLEDG	;wreg free
   547  000164  0900               	iorlw	0
   548  000166  A4D8               	btfss	status,2,c
   549  000168  D002               	goto	u1430
   550  00016A  0E01               	movlw	1
   551  00016C  D001               	goto	u1440
   552  00016E                     u1430:
   553  00016E  0E00               	movlw	0
   554  000170                     u1440:
   555  000170  EC3A  F005         	call	_setLEDG
   556  000174                     l1628:
   557                           
   558                           ;main.c: 96: }
   559                           ;main.c: 97: if(!getBTN1()) setStatus(MENU);
   560  000174  EC5F  F005         	call	_getBTN1	;wreg free
   561  000178  0900               	iorlw	0
   562  00017A  A4D8               	btfss	status,2,c
   563  00017C  0012               	return	
   564  00017E  0E00               	movlw	0
   565  000180  6E10               	movwf	setStatus@s+1,c
   566  000182  0E01               	movlw	1
   567  000184  6E0F               	movwf	setStatus@s,c
   568  000186  EC25  F005         	call	_setStatus	;wreg free
   569                           
   570                           ;main.c: 98: return;
   571  00018A  0012               	return	
   572  00018C                     l1634:
   573                           
   574                           ;main.c: 101: if(newStatus()){
   575  00018C  EC41  F005         	call	_newStatus	;wreg free
   576  000190  0900               	iorlw	0
   577  000192  B4D8               	btfsc	status,2,c
   578  000194  D011               	goto	l1640
   579                           
   580                           ;main.c: 102: setMotors(0, 0);
   581  000196  0E00               	movlw	0
   582  000198  6E1C               	movwf	setMotors@left+1,c
   583  00019A  0E00               	movlw	0
   584  00019C  6E1B               	movwf	setMotors@left,c
   585  00019E  0E00               	movlw	0
   586  0001A0  6E1E               	movwf	setMotors@right+1,c
   587  0001A2  0E00               	movlw	0
   588  0001A4  6E1D               	movwf	setMotors@right,c
   589  0001A6  ECDD  F004         	call	_setMotors	;wreg free
   590                           
   591                           ;main.c: 103: setLEDs(1, 0, 0);
   592  0001AA  0E00               	movlw	0
   593  0001AC  6E10               	movwf	setLEDs@y,c
   594  0001AE  0E00               	movlw	0
   595  0001B0  6E11               	movwf	setLEDs@g,c
   596  0001B2  0E01               	movlw	1
   597  0001B4  ECF7  F004         	call	_setLEDs
   598  0001B8                     l1640:
   599                           
   600                           ;main.c: 104: }
   601                           ;main.c: 105: if(now >= next){
   602  0001B8  5023               	movf	loop@next,w,c
   603  0001BA  5C27               	subwf	loop@now,w,c
   604  0001BC  5024               	movf	loop@next+1,w,c
   605  0001BE  5828               	subwfb	loop@now+1,w,c
   606  0001C0  5025               	movf	loop@next+2,w,c
   607  0001C2  5829               	subwfb	loop@now+2,w,c
   608  0001C4  5026               	movf	loop@next+3,w,c
   609  0001C6  582A               	subwfb	loop@now+3,w,c
   610  0001C8  A0D8               	btfss	status,0,c
   611  0001CA  D016               	goto	l1646
   612                           
   613                           ;main.c: 106: next = now + 500;
   614  0001CC  0EF4               	movlw	244
   615  0001CE  2427               	addwf	loop@now,w,c
   616  0001D0  6E23               	movwf	loop@next,c
   617  0001D2  0E01               	movlw	1
   618  0001D4  2028               	addwfc	loop@now+1,w,c
   619  0001D6  6E24               	movwf	loop@next+1,c
   620  0001D8  0E00               	movlw	0
   621  0001DA  2029               	addwfc	loop@now+2,w,c
   622  0001DC  6E25               	movwf	loop@next+2,c
   623  0001DE  0E00               	movlw	0
   624  0001E0  202A               	addwfc	loop@now+3,w,c
   625  0001E2  6E26               	movwf	loop@next+3,c
   626                           
   627                           ;main.c: 107: setLEDR(!getLEDR());
   628  0001E4  EC4D  F005         	call	_getLEDR	;wreg free
   629  0001E8  0900               	iorlw	0
   630  0001EA  A4D8               	btfss	status,2,c
   631  0001EC  D002               	goto	u1480
   632  0001EE  0E01               	movlw	1
   633  0001F0  D001               	goto	u1490
   634  0001F2                     u1480:
   635  0001F2  0E00               	movlw	0
   636  0001F4                     u1490:
   637  0001F4  EC33  F005         	call	_setLEDR
   638  0001F8                     l1646:
   639                           
   640                           ;main.c: 108: }
   641                           ;main.c: 109: if(getBTN1()){
   642  0001F8  EC5F  F005         	call	_getBTN1	;wreg free
   643  0001FC  0900               	iorlw	0
   644  0001FE  B4D8               	btfsc	status,2,c
   645  000200  D016               	goto	l1656
   646                           
   647                           ;main.c: 110: setLEDs(1, 1, 1);
   648  000202  0E01               	movlw	1
   649  000204  6E10               	movwf	setLEDs@y,c
   650  000206  0E01               	movlw	1
   651  000208  6E11               	movwf	setLEDs@g,c
   652  00020A  0E01               	movlw	1
   653  00020C  ECF7  F004         	call	_setLEDs
   654  000210                     l1650:
   655  000210  EC5F  F005         	call	_getBTN1	;wreg free
   656  000214  0900               	iorlw	0
   657  000216  A4D8               	btfss	status,2,c
   658  000218  D7FB               	goto	l1650
   659                           
   660                           ;main.c: 112: targetDirection = LEFT;
   661  00021A  0E00               	movlw	0
   662  00021C  6E34               	movwf	_targetDirection+1,c
   663  00021E  0E09               	movlw	9
   664  000220  6E33               	movwf	_targetDirection,c
   665                           
   666                           ;main.c: 113: setStatus(WAIT);
   667  000222  0E00               	movlw	0
   668  000224  6E10               	movwf	setStatus@s+1,c
   669  000226  0E04               	movlw	4
   670  000228  6E0F               	movwf	setStatus@s,c
   671  00022A  EC25  F005         	call	_setStatus	;wreg free
   672  00022E                     l1656:
   673                           
   674                           ;main.c: 114: }
   675                           ;main.c: 115: if(getBTN2()){
   676  00022E  EC59  F005         	call	_getBTN2	;wreg free
   677  000232  0900               	iorlw	0
   678  000234  B4D8               	btfsc	status,2,c
   679  000236  0012               	return	
   680                           
   681                           ;main.c: 116: setLEDs(1, 1, 1);
   682  000238  0E01               	movlw	1
   683  00023A  6E10               	movwf	setLEDs@y,c
   684  00023C  0E01               	movlw	1
   685  00023E  6E11               	movwf	setLEDs@g,c
   686  000240  0E01               	movlw	1
   687  000242  ECF7  F004         	call	_setLEDs
   688  000246                     l1660:
   689  000246  EC59  F005         	call	_getBTN2	;wreg free
   690  00024A  0900               	iorlw	0
   691  00024C  A4D8               	btfss	status,2,c
   692  00024E  D7FB               	goto	l1660
   693                           
   694                           ;main.c: 118: targetDirection = RIGHT;
   695  000250  0E00               	movlw	0
   696  000252  6E34               	movwf	_targetDirection+1,c
   697  000254  0E08               	movlw	8
   698  000256  6E33               	movwf	_targetDirection,c
   699                           
   700                           ;main.c: 119: setStatus(WAIT);
   701  000258  0E00               	movlw	0
   702  00025A  6E10               	movwf	setStatus@s+1,c
   703  00025C  0E04               	movlw	4
   704  00025E  6E0F               	movwf	setStatus@s,c
   705  000260  EC25  F005         	call	_setStatus	;wreg free
   706                           
   707                           ;main.c: 120: }
   708                           ;main.c: 121: return;
   709  000264  0012               	return	
   710  000266                     l1668:
   711                           
   712                           ;main.c: 124: if(newStatus()){
   713  000266  EC41  F005         	call	_newStatus	;wreg free
   714  00026A  0900               	iorlw	0
   715  00026C  B4D8               	btfsc	status,2,c
   716  00026E  D01D               	goto	l1676
   717                           
   718                           ;main.c: 125: next = now + 4950;
   719  000270  0E56               	movlw	86
   720  000272  2427               	addwf	loop@now,w,c
   721  000274  6E23               	movwf	loop@next,c
   722  000276  0E13               	movlw	19
   723  000278  2028               	addwfc	loop@now+1,w,c
   724  00027A  6E24               	movwf	loop@next+1,c
   725  00027C  0E00               	movlw	0
   726  00027E  2029               	addwfc	loop@now+2,w,c
   727  000280  6E25               	movwf	loop@next+2,c
   728  000282  0E00               	movlw	0
   729  000284  202A               	addwfc	loop@now+3,w,c
   730  000286  6E26               	movwf	loop@next+3,c
   731                           
   732                           ;main.c: 126: setLEDs(1, 0, 0);
   733  000288  0E00               	movlw	0
   734  00028A  6E10               	movwf	setLEDs@y,c
   735  00028C  0E00               	movlw	0
   736  00028E  6E11               	movwf	setLEDs@g,c
   737  000290  0E01               	movlw	1
   738  000292  ECF7  F004         	call	_setLEDs
   739                           
   740                           ;main.c: 127: setMotors(0, 0);
   741  000296  0E00               	movlw	0
   742  000298  6E1C               	movwf	setMotors@left+1,c
   743  00029A  0E00               	movlw	0
   744  00029C  6E1B               	movwf	setMotors@left,c
   745  00029E  0E00               	movlw	0
   746  0002A0  6E1E               	movwf	setMotors@right+1,c
   747  0002A2  0E00               	movlw	0
   748  0002A4  6E1D               	movwf	setMotors@right,c
   749  0002A6  ECDD  F004         	call	_setMotors	;wreg free
   750  0002AA                     l1676:
   751                           
   752                           ;main.c: 128: }
   753                           ;main.c: 129: setLEDY(now > next - 4950 / 2);
   754  0002AA  0E55               	movlw	85
   755  0002AC  2423               	addwf	loop@next,w,c
   756  0002AE  6E1F               	movwf	??_loop& (0+255),c
   757  0002B0  0EF6               	movlw	246
   758  0002B2  2024               	addwfc	loop@next+1,w,c
   759  0002B4  6E20               	movwf	(??_loop+1)& (0+255),c
   760  0002B6  0EFF               	movlw	255
   761  0002B8  2025               	addwfc	loop@next+2,w,c
   762  0002BA  6E21               	movwf	(??_loop+2)& (0+255),c
   763  0002BC  0EFF               	movlw	255
   764  0002BE  2026               	addwfc	loop@next+3,w,c
   765  0002C0  6E22               	movwf	(??_loop+3)& (0+255),c
   766  0002C2  5027               	movf	loop@now,w,c
   767  0002C4  5C1F               	subwf	??_loop,w,c
   768  0002C6  5028               	movf	loop@now+1,w,c
   769  0002C8  5820               	subwfb	??_loop+1,w,c
   770  0002CA  5029               	movf	loop@now+2,w,c
   771  0002CC  5821               	subwfb	??_loop+2,w,c
   772  0002CE  502A               	movf	loop@now+3,w,c
   773  0002D0  5822               	subwfb	??_loop+3,w,c
   774  0002D2  B0D8               	btfsc	status,0,c
   775  0002D4  D002               	goto	u1550
   776  0002D6  0E01               	movlw	1
   777  0002D8  D001               	goto	u1560
   778  0002DA                     u1550:
   779  0002DA  0E00               	movlw	0
   780  0002DC                     u1560:
   781  0002DC  EC2C  F005         	call	_setLEDY
   782                           
   783                           ;main.c: 130: if(next >= now){
   784  0002E0  5027               	movf	loop@now,w,c
   785  0002E2  5C23               	subwf	loop@next,w,c
   786  0002E4  5028               	movf	loop@now+1,w,c
   787  0002E6  5824               	subwfb	loop@next+1,w,c
   788  0002E8  5029               	movf	loop@now+2,w,c
   789  0002EA  5825               	subwfb	loop@next+2,w,c
   790  0002EC  502A               	movf	loop@now+3,w,c
   791  0002EE  5826               	subwfb	loop@next+3,w,c
   792  0002F0  A0D8               	btfss	status,0,c
   793  0002F2  0012               	return	
   794                           
   795                           ;main.c: 131: setStatus(RUN);
   796  0002F4  0E00               	movlw	0
   797  0002F6  6E10               	movwf	setStatus@s+1,c
   798  0002F8  0E05               	movlw	5
   799  0002FA  6E0F               	movwf	setStatus@s,c
   800  0002FC  EC25  F005         	call	_setStatus	;wreg free
   801                           
   802                           ;main.c: 133: }
   803                           ;main.c: 134: return;
   804                           
   805                           ;main.c: 132: return;
   806  000300  0012               	return	
   807  000302                     l1684:
   808                           
   809                           ;main.c: 137: switchIR(1);
   810  000302  0E01               	movlw	1
   811  000304  ECA0  F004         	call	_switchIR
   812                           
   813                           ;main.c: 138: if(getBTNs()){
   814  000308  ECC0  F004         	call	_getBTNs	;wreg free
   815  00030C  0900               	iorlw	0
   816  00030E  B4D8               	btfsc	status,2,c
   817  000310  D007               	goto	l1692
   818                           
   819                           ;main.c: 139: setStatus(MENU);
   820  000312  0E00               	movlw	0
   821  000314  6E10               	movwf	setStatus@s+1,c
   822  000316  0E01               	movlw	1
   823  000318  6E0F               	movwf	setStatus@s,c
   824  00031A  EC25  F005         	call	_setStatus	;wreg free
   825                           
   826                           ;main.c: 140: return;
   827  00031E  0012               	return	
   828  000320                     l1692:
   829                           
   830                           ;main.c: 141: }
   831                           ;main.c: 142: if(getCNYs()){
   832  000320  EC14  F005         	call	_getCNYs	;wreg free
   833  000324  0900               	iorlw	0
   834  000326  B4D8               	btfsc	status,2,c
   835  000328  D007               	goto	l1698
   836                           
   837                           ;main.c: 143: setStatus(BACK);
   838  00032A  0E00               	movlw	0
   839  00032C  6E10               	movwf	setStatus@s+1,c
   840  00032E  0E07               	movlw	7
   841  000330  6E0F               	movwf	setStatus@s,c
   842  000332  EC25  F005         	call	_setStatus	;wreg free
   843                           
   844                           ;main.c: 144: return;
   845  000336  0012               	return	
   846  000338                     l1698:
   847                           
   848                           ;main.c: 145: }
   849                           ;main.c: 146: if(getIR(IR_C)){
   850  000338  0E03               	movlw	3
   851  00033A  EC2E  F004         	call	_getIR
   852  00033E  0900               	iorlw	0
   853  000340  B4D8               	btfsc	status,2,c
   854  000342  D029               	goto	l1720
   855                           
   856                           ;main.c: 147: if(getIR(IR_CL)){
   857  000344  0E02               	movlw	2
   858  000346  EC2E  F004         	call	_getIR
   859  00034A  0900               	iorlw	0
   860  00034C  B4D8               	btfsc	status,2,c
   861  00034E  D00B               	goto	l1708
   862                           
   863                           ;main.c: 148: setStatus(CLOSED_LEFT);
   864  000350  0E00               	movlw	0
   865  000352  6E10               	movwf	setStatus@s+1,c
   866  000354  0E0D               	movlw	13
   867  000356  6E0F               	movwf	setStatus@s,c
   868  000358  EC25  F005         	call	_setStatus	;wreg free
   869                           
   870                           ;main.c: 149: targetDirection = LEFT;
   871  00035C  0E00               	movlw	0
   872  00035E  6E34               	movwf	_targetDirection+1,c
   873  000360  0E09               	movlw	9
   874  000362  6E33               	movwf	_targetDirection,c
   875                           
   876                           ;main.c: 150: return;
   877  000364  0012               	return	
   878  000366                     l1708:
   879                           
   880                           ;main.c: 151: }
   881                           ;main.c: 152: if(getIR(IR_CR)){
   882  000366  0E04               	movlw	4
   883  000368  EC2E  F004         	call	_getIR
   884  00036C  0900               	iorlw	0
   885  00036E  B4D8               	btfsc	status,2,c
   886  000370  D00B               	goto	l1716
   887                           
   888                           ;main.c: 153: setStatus(CLOSED_RIGHT);
   889  000372  0E00               	movlw	0
   890  000374  6E10               	movwf	setStatus@s+1,c
   891  000376  0E0C               	movlw	12
   892  000378  6E0F               	movwf	setStatus@s,c
   893  00037A  EC25  F005         	call	_setStatus	;wreg free
   894                           
   895                           ;main.c: 154: targetDirection = RIGHT;
   896  00037E  0E00               	movlw	0
   897  000380  6E34               	movwf	_targetDirection+1,c
   898  000382  0E08               	movlw	8
   899  000384  6E33               	movwf	_targetDirection,c
   900                           
   901                           ;main.c: 155: return;
   902  000386  0012               	return	
   903  000388                     l1716:
   904                           
   905                           ;main.c: 156: }
   906                           ;main.c: 157: setStatus(ATTACK);
   907  000388  0E00               	movlw	0
   908  00038A  6E10               	movwf	setStatus@s+1,c
   909  00038C  0E06               	movlw	6
   910  00038E  6E0F               	movwf	setStatus@s,c
   911  000390  EC25  F005         	call	_setStatus	;wreg free
   912                           
   913                           ;main.c: 158: return;
   914  000394  0012               	return	
   915  000396                     l1720:
   916                           
   917                           ;main.c: 159: }
   918                           ;main.c: 160: if(getIR(IR_CL)){
   919  000396  0E02               	movlw	2
   920  000398  EC2E  F004         	call	_getIR
   921  00039C  0900               	iorlw	0
   922  00039E  B4D8               	btfsc	status,2,c
   923  0003A0  D00B               	goto	l1728
   924                           
   925                           ;main.c: 161: setStatus(OPEN_LEFT);
   926  0003A2  0E00               	movlw	0
   927  0003A4  6E10               	movwf	setStatus@s+1,c
   928  0003A6  0E0B               	movlw	11
   929  0003A8  6E0F               	movwf	setStatus@s,c
   930  0003AA  EC25  F005         	call	_setStatus	;wreg free
   931                           
   932                           ;main.c: 162: targetDirection = LEFT;
   933  0003AE  0E00               	movlw	0
   934  0003B0  6E34               	movwf	_targetDirection+1,c
   935  0003B2  0E09               	movlw	9
   936  0003B4  6E33               	movwf	_targetDirection,c
   937                           
   938                           ;main.c: 163: return;
   939  0003B6  0012               	return	
   940  0003B8                     l1728:
   941                           
   942                           ;main.c: 164: }
   943                           ;main.c: 165: if(getIR(IR_CR)){
   944  0003B8  0E04               	movlw	4
   945  0003BA  EC2E  F004         	call	_getIR
   946  0003BE  0900               	iorlw	0
   947  0003C0  B4D8               	btfsc	status,2,c
   948  0003C2  D00B               	goto	l1736
   949                           
   950                           ;main.c: 166: setStatus(OPEN_RIGHT);
   951  0003C4  0E00               	movlw	0
   952  0003C6  6E10               	movwf	setStatus@s+1,c
   953  0003C8  0E0A               	movlw	10
   954  0003CA  6E0F               	movwf	setStatus@s,c
   955  0003CC  EC25  F005         	call	_setStatus	;wreg free
   956                           
   957                           ;main.c: 167: targetDirection = RIGHT;
   958  0003D0  0E00               	movlw	0
   959  0003D2  6E34               	movwf	_targetDirection+1,c
   960  0003D4  0E08               	movlw	8
   961  0003D6  6E33               	movwf	_targetDirection,c
   962                           
   963                           ;main.c: 168: return;
   964  0003D8  0012               	return	
   965  0003DA                     l1736:
   966                           
   967                           ;main.c: 169: }
   968                           ;main.c: 170: if(getIR(IR_R)){
   969  0003DA  0E05               	movlw	5
   970  0003DC  EC2E  F004         	call	_getIR
   971  0003E0  0900               	iorlw	0
   972  0003E2  B4D8               	btfsc	status,2,c
   973  0003E4  D00B               	goto	l1744
   974                           
   975                           ;main.c: 171: setStatus(RIGHT);
   976  0003E6  0E00               	movlw	0
   977  0003E8  6E10               	movwf	setStatus@s+1,c
   978  0003EA  0E08               	movlw	8
   979  0003EC  6E0F               	movwf	setStatus@s,c
   980  0003EE  EC25  F005         	call	_setStatus	;wreg free
   981                           
   982                           ;main.c: 172: targetDirection = RIGHT;
   983  0003F2  0E00               	movlw	0
   984  0003F4  6E34               	movwf	_targetDirection+1,c
   985  0003F6  0E08               	movlw	8
   986  0003F8  6E33               	movwf	_targetDirection,c
   987                           
   988                           ;main.c: 173: return;
   989  0003FA  0012               	return	
   990  0003FC                     l1744:
   991                           
   992                           ;main.c: 174: }
   993                           ;main.c: 175: if(getIR(IR_L)){
   994  0003FC  0E01               	movlw	1
   995  0003FE  EC2E  F004         	call	_getIR
   996  000402  0900               	iorlw	0
   997  000404  B4D8               	btfsc	status,2,c
   998  000406  D00B               	goto	l1752
   999                           
  1000                           ;main.c: 176: setStatus(LEFT);
  1001  000408  0E00               	movlw	0
  1002  00040A  6E10               	movwf	setStatus@s+1,c
  1003  00040C  0E09               	movlw	9
  1004  00040E  6E0F               	movwf	setStatus@s,c
  1005  000410  EC25  F005         	call	_setStatus	;wreg free
  1006                           
  1007                           ;main.c: 177: targetDirection = LEFT;
  1008  000414  0E00               	movlw	0
  1009  000416  6E34               	movwf	_targetDirection+1,c
  1010  000418  0E09               	movlw	9
  1011  00041A  6E33               	movwf	_targetDirection,c
  1012                           
  1013                           ;main.c: 178: return;
  1014  00041C  0012               	return	
  1015  00041E                     l1752:
  1016                           
  1017                           ;main.c: 179: }
  1018                           ;main.c: 180: setStatus(targetDirection);
  1019  00041E  C033  F00F         	movff	_targetDirection,setStatus@s
  1020  000422  C034  F010         	movff	_targetDirection+1,setStatus@s+1
  1021  000426  EC25  F005         	call	_setStatus	;wreg free
  1022                           
  1023                           ;main.c: 181: switchIR(0);
  1024  00042A  0E00               	movlw	0
  1025  00042C  ECA0  F004         	call	_switchIR
  1026                           
  1027                           ;main.c: 182: return;
  1028  000430  0012               	return	
  1029  000432                     l1758:
  1030                           
  1031                           ;main.c: 185: setBothMotors(1000);
  1032  000432  0E03               	movlw	3
  1033  000434  6E1C               	movwf	setBothMotors@speed+1,c
  1034  000436  0EE8               	movlw	232
  1035  000438  6E1B               	movwf	setBothMotors@speed,c
  1036  00043A  ECEA  F004         	call	_setBothMotors	;wreg free
  1037                           
  1038                           ;main.c: 186: setStatus(RUN);
  1039  00043E  0E00               	movlw	0
  1040  000440  6E10               	movwf	setStatus@s+1,c
  1041  000442  0E05               	movlw	5
  1042  000444  6E0F               	movwf	setStatus@s,c
  1043  000446  EC25  F005         	call	_setStatus	;wreg free
  1044                           
  1045                           ;main.c: 187: return;
  1046  00044A  0012               	return	
  1047  00044C                     l1764:
  1048                           
  1049                           ;main.c: 190: if(newStatus()){
  1050  00044C  EC41  F005         	call	_newStatus	;wreg free
  1051  000450  0900               	iorlw	0
  1052  000452  B4D8               	btfsc	status,2,c
  1053  000454  D012               	goto	l1770
  1054                           
  1055                           ;main.c: 191: setBothMotors(1000);
  1056  000456  0E03               	movlw	3
  1057  000458  6E1C               	movwf	setBothMotors@speed+1,c
  1058  00045A  0EE8               	movlw	232
  1059  00045C  6E1B               	movwf	setBothMotors@speed,c
  1060  00045E  ECEA  F004         	call	_setBothMotors	;wreg free
  1061                           
  1062                           ;main.c: 192: next = now + 1000;
  1063  000462  0EE8               	movlw	232
  1064  000464  2427               	addwf	loop@now,w,c
  1065  000466  6E23               	movwf	loop@next,c
  1066  000468  0E03               	movlw	3
  1067  00046A  2028               	addwfc	loop@now+1,w,c
  1068  00046C  6E24               	movwf	loop@next+1,c
  1069  00046E  0E00               	movlw	0
  1070  000470  2029               	addwfc	loop@now+2,w,c
  1071  000472  6E25               	movwf	loop@next+2,c
  1072  000474  0E00               	movlw	0
  1073  000476  202A               	addwfc	loop@now+3,w,c
  1074  000478  6E26               	movwf	loop@next+3,c
  1075  00047A                     l1770:
  1076                           
  1077                           ;main.c: 193: }
  1078                           ;main.c: 194: if(now >= next || getIRs()) setStatus(RUN);
  1079  00047A  5023               	movf	loop@next,w,c
  1080  00047C  5C27               	subwf	loop@now,w,c
  1081  00047E  5024               	movf	loop@next+1,w,c
  1082  000480  5828               	subwfb	loop@now+1,w,c
  1083  000482  5025               	movf	loop@next+2,w,c
  1084  000484  5829               	subwfb	loop@now+2,w,c
  1085  000486  5026               	movf	loop@next+3,w,c
  1086  000488  582A               	subwfb	loop@now+3,w,c
  1087  00048A  B0D8               	btfsc	status,0,c
  1088  00048C  D005               	goto	l1774
  1089  00048E  ECB0  F004         	call	_getIRs	;wreg free
  1090  000492  0900               	iorlw	0
  1091  000494  B4D8               	btfsc	status,2,c
  1092  000496  0012               	return	
  1093  000498                     l1774:
  1094  000498  0E00               	movlw	0
  1095  00049A  6E10               	movwf	setStatus@s+1,c
  1096  00049C  0E05               	movlw	5
  1097  00049E  6E0F               	movwf	setStatus@s,c
  1098  0004A0  EC25  F005         	call	_setStatus	;wreg free
  1099                           
  1100                           ;main.c: 195: return;
  1101  0004A4  0012               	return	
  1102  0004A6                     l1778:
  1103                           
  1104                           ;main.c: 198: setMotors(1000, -1000);
  1105  0004A6  0E03               	movlw	3
  1106  0004A8  6E1C               	movwf	setMotors@left+1,c
  1107  0004AA  0EE8               	movlw	232
  1108  0004AC  6E1B               	movwf	setMotors@left,c
  1109  0004AE  0EFC               	movlw	252
  1110  0004B0  6E1E               	movwf	setMotors@right+1,c
  1111  0004B2  0E18               	movlw	24
  1112  0004B4  6E1D               	movwf	setMotors@right,c
  1113  0004B6  ECDD  F004         	call	_setMotors	;wreg free
  1114                           
  1115                           ;main.c: 199: setStatus(RUN);
  1116  0004BA  0E00               	movlw	0
  1117  0004BC  6E10               	movwf	setStatus@s+1,c
  1118  0004BE  0E05               	movlw	5
  1119  0004C0  6E0F               	movwf	setStatus@s,c
  1120  0004C2  EC25  F005         	call	_setStatus	;wreg free
  1121                           
  1122                           ;main.c: 200: return;
  1123  0004C6  0012               	return	
  1124  0004C8                     l1784:
  1125                           
  1126                           ;main.c: 203: setMotors(-1000, 1000);
  1127  0004C8  0EFC               	movlw	252
  1128  0004CA  6E1C               	movwf	setMotors@left+1,c
  1129  0004CC  0E18               	movlw	24
  1130  0004CE  6E1B               	movwf	setMotors@left,c
  1131  0004D0  0E03               	movlw	3
  1132  0004D2  6E1E               	movwf	setMotors@right+1,c
  1133  0004D4  0EE8               	movlw	232
  1134  0004D6  6E1D               	movwf	setMotors@right,c
  1135  0004D8  ECDD  F004         	call	_setMotors	;wreg free
  1136                           
  1137                           ;main.c: 204: setStatus(RUN);
  1138  0004DC  0E00               	movlw	0
  1139  0004DE  6E10               	movwf	setStatus@s+1,c
  1140  0004E0  0E05               	movlw	5
  1141  0004E2  6E0F               	movwf	setStatus@s,c
  1142  0004E4  EC25  F005         	call	_setStatus	;wreg free
  1143                           
  1144                           ;main.c: 205: return;
  1145  0004E8  0012               	return	
  1146  0004EA                     l1790:
  1147                           
  1148                           ;main.c: 208: setMotors(1000, 0);
  1149  0004EA  0E03               	movlw	3
  1150  0004EC  6E1C               	movwf	setMotors@left+1,c
  1151  0004EE  0EE8               	movlw	232
  1152  0004F0  6E1B               	movwf	setMotors@left,c
  1153  0004F2  0E00               	movlw	0
  1154  0004F4  6E1E               	movwf	setMotors@right+1,c
  1155  0004F6  0E00               	movlw	0
  1156  0004F8  6E1D               	movwf	setMotors@right,c
  1157  0004FA  ECDD  F004         	call	_setMotors	;wreg free
  1158                           
  1159                           ;main.c: 209: setStatus(RUN);
  1160  0004FE  0E00               	movlw	0
  1161  000500  6E10               	movwf	setStatus@s+1,c
  1162  000502  0E05               	movlw	5
  1163  000504  6E0F               	movwf	setStatus@s,c
  1164  000506  EC25  F005         	call	_setStatus	;wreg free
  1165                           
  1166                           ;main.c: 210: return;
  1167  00050A  0012               	return	
  1168  00050C                     l1796:
  1169                           
  1170                           ;main.c: 213: setMotors(0, 1000);
  1171  00050C  0E00               	movlw	0
  1172  00050E  6E1C               	movwf	setMotors@left+1,c
  1173  000510  0E00               	movlw	0
  1174  000512  6E1B               	movwf	setMotors@left,c
  1175  000514  0E03               	movlw	3
  1176  000516  6E1E               	movwf	setMotors@right+1,c
  1177  000518  0EE8               	movlw	232
  1178  00051A  6E1D               	movwf	setMotors@right,c
  1179  00051C  ECDD  F004         	call	_setMotors	;wreg free
  1180                           
  1181                           ;main.c: 214: setStatus(RUN);
  1182  000520  0E00               	movlw	0
  1183  000522  6E10               	movwf	setStatus@s+1,c
  1184  000524  0E05               	movlw	5
  1185  000526  6E0F               	movwf	setStatus@s,c
  1186  000528  EC25  F005         	call	_setStatus	;wreg free
  1187                           
  1188                           ;main.c: 215: return;
  1189  00052C  0012               	return	
  1190  00052E                     l1802:
  1191                           
  1192                           ;main.c: 218: setMotors(1000, 1000 / 2);
  1193  00052E  0E03               	movlw	3
  1194  000530  6E1C               	movwf	setMotors@left+1,c
  1195  000532  0EE8               	movlw	232
  1196  000534  6E1B               	movwf	setMotors@left,c
  1197  000536  0E01               	movlw	1
  1198  000538  6E1E               	movwf	setMotors@right+1,c
  1199  00053A  0EF4               	movlw	244
  1200  00053C  6E1D               	movwf	setMotors@right,c
  1201  00053E  ECDD  F004         	call	_setMotors	;wreg free
  1202                           
  1203                           ;main.c: 219: setStatus(RUN);
  1204  000542  0E00               	movlw	0
  1205  000544  6E10               	movwf	setStatus@s+1,c
  1206  000546  0E05               	movlw	5
  1207  000548  6E0F               	movwf	setStatus@s,c
  1208  00054A  EC25  F005         	call	_setStatus	;wreg free
  1209                           
  1210                           ;main.c: 220: return;
  1211  00054E  0012               	return	
  1212  000550                     l1808:
  1213                           
  1214                           ;main.c: 223: setMotors(1000 / 2, 1000);
  1215  000550  0E01               	movlw	1
  1216  000552  6E1C               	movwf	setMotors@left+1,c
  1217  000554  0EF4               	movlw	244
  1218  000556  6E1B               	movwf	setMotors@left,c
  1219  000558  0E03               	movlw	3
  1220  00055A  6E1E               	movwf	setMotors@right+1,c
  1221  00055C  0EE8               	movlw	232
  1222  00055E  6E1D               	movwf	setMotors@right,c
  1223  000560  ECDD  F004         	call	_setMotors	;wreg free
  1224                           
  1225                           ;main.c: 224: setStatus(RUN);
  1226  000564  0E00               	movlw	0
  1227  000566  6E10               	movwf	setStatus@s+1,c
  1228  000568  0E05               	movlw	5
  1229  00056A  6E0F               	movwf	setStatus@s,c
  1230  00056C  EC25  F005         	call	_setStatus	;wreg free
  1231                           
  1232                           ;main.c: 226: }
  1233                           
  1234                           ;main.c: 225: return;
  1235  000570  0012               	return	
  1236  000572                     l1816:
  1237  000572  C031  F01F         	movff	_status,??_loop
  1238  000576  C032  F020         	movff	_status+1,??_loop+1
  1239                           
  1240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1241                           ; Switch size 1, requested type "space"
  1242                           ; Number of cases is 1, Range of values is 0 to 0
  1243                           ; switch strategies available:
  1244                           ; Name         Instructions Cycles
  1245                           ; simple_byte            4     3 (average)
  1246                           ;	Chosen strategy is simple_byte
  1247  00057A  5020               	movf	??_loop+1,w,c
  1248  00057C  0A00               	xorlw	0	; case 0
  1249  00057E  A4D8               	btfss	status,2,c
  1250  000580  0012               	return	
  1251                           
  1252                           ; Switch size 1, requested type "space"
  1253                           ; Number of cases is 14, Range of values is 0 to 13
  1254                           ; switch strategies available:
  1255                           ; Name         Instructions Cycles
  1256                           ; simple_byte           43    22 (average)
  1257                           ;	Chosen strategy is simple_byte
  1258  000582  501F               	movf	??_loop,w,c
  1259  000584  0A00               	xorlw	0	; case 0
  1260  000586  B4D8               	btfsc	status,2,c
  1261  000588  D55B               	goto	l1572
  1262  00058A  0A01               	xorlw	1	; case 1
  1263  00058C  B4D8               	btfsc	status,2,c
  1264  00058E  D575               	goto	l1590
  1265  000590  0A03               	xorlw	3	; case 2
  1266  000592  B4D8               	btfsc	status,2,c
  1267  000594  D5A5               	goto	l1612
  1268  000596  0A01               	xorlw	1	; case 3
  1269  000598  B4D8               	btfsc	status,2,c
  1270  00059A  D5F8               	goto	l1634
  1271  00059C  0A07               	xorlw	7	; case 4
  1272  00059E  B4D8               	btfsc	status,2,c
  1273  0005A0  D662               	goto	l1668
  1274  0005A2  0A01               	xorlw	1	; case 5
  1275  0005A4  B4D8               	btfsc	status,2,c
  1276  0005A6  D6AD               	goto	l1684
  1277  0005A8  0A03               	xorlw	3	; case 6
  1278  0005AA  B4D8               	btfsc	status,2,c
  1279  0005AC  D742               	goto	l1758
  1280  0005AE  0A01               	xorlw	1	; case 7
  1281  0005B0  B4D8               	btfsc	status,2,c
  1282  0005B2  D74C               	goto	l1764
  1283  0005B4  0A0F               	xorlw	15	; case 8
  1284  0005B6  B4D8               	btfsc	status,2,c
  1285  0005B8  D776               	goto	l1778
  1286  0005BA  0A01               	xorlw	1	; case 9
  1287  0005BC  B4D8               	btfsc	status,2,c
  1288  0005BE  D784               	goto	l1784
  1289  0005C0  0A03               	xorlw	3	; case 10
  1290  0005C2  B4D8               	btfsc	status,2,c
  1291  0005C4  D792               	goto	l1790
  1292  0005C6  0A01               	xorlw	1	; case 11
  1293  0005C8  B4D8               	btfsc	status,2,c
  1294  0005CA  D7A0               	goto	l1796
  1295  0005CC  0A07               	xorlw	7	; case 12
  1296  0005CE  B4D8               	btfsc	status,2,c
  1297  0005D0  D7AE               	goto	l1802
  1298  0005D2  0A01               	xorlw	1	; case 13
  1299  0005D4  A4D8               	btfss	status,2,c
  1300  0005D6  0012               	return	
  1301  0005D8  D7BB               	goto	l1808
  1302  0005DA                     __end_of_loop:
  1303                           	opt stack 0
  1304                           tblptru	equ	0xFF8
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           status	equ	0xFD8
  1308                           
  1309 ;; *************** function _switchIR *****************
  1310 ;; Defined at:
  1311 ;;		line 44 in file "sensors.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;  n               1    wreg     unsigned char 
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;  n               1   15[COMRAM] unsigned char 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      void 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1325 ;;      Params:         0       0       0       0       0       0       0       0       0
  1326 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1327 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1328 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1329 ;;Total ram usage:        2 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    2
  1332 ;; This function calls:
  1333 ;;		Nothing
  1334 ;; This function is called by:
  1335 ;;		_loop
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text2
  1340  000940                     __ptext2:
  1341                           	opt stack 0
  1342  000940                     _switchIR:
  1343                           	opt stack 27
  1344                           
  1345                           ;incstack = 0
  1346                           ;switchIR@n stored from wreg
  1347  000940  6E10               	movwf	switchIR@n,c
  1348                           
  1349                           ;sensors.c: 45: LATBbits.LB2 = n != 0;
  1350  000942  5010               	movf	switchIR@n,w,c
  1351  000944  B4D8               	btfsc	status,2,c
  1352  000946  D003               	goto	u300
  1353  000948  6A0F               	clrf	??_switchIR& (0+255),c
  1354  00094A  2A0F               	incf	??_switchIR& (0+255),f,c
  1355  00094C  D001               	goto	u318
  1356  00094E                     u300:
  1357  00094E  6A0F               	clrf	??_switchIR& (0+255),c
  1358  000950                     u318:
  1359  000950  460F               	rlncf	??_switchIR,f,c
  1360  000952  460F               	rlncf	??_switchIR,f,c
  1361  000954  508A               	movf	3978,w,c	;volatile
  1362  000956  180F               	xorwf	??_switchIR,w,c
  1363  000958  0BFB               	andlw	-5
  1364  00095A  180F               	xorwf	??_switchIR,w,c
  1365  00095C  6E8A               	movwf	3978,c	;volatile
  1366  00095E  0012               	return		;funcret
  1367  000960                     __end_of_switchIR:
  1368                           	opt stack 0
  1369                           tblptru	equ	0xFF8
  1370                           postinc0	equ	0xFEE
  1371                           wreg	equ	0xFE8
  1372                           status	equ	0xFD8
  1373                           
  1374 ;; *************** function _setStatus *****************
  1375 ;; Defined at:
  1376 ;;		line 36 in file "main.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;  s               2   14[COMRAM] int 
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;		None
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, status,2
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1390 ;;      Params:         2       0       0       0       0       0       0       0       0
  1391 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1392 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1393 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1394 ;;Total ram usage:        2 bytes
  1395 ;; Hardware stack levels used:    1
  1396 ;; Hardware stack levels required when called:    2
  1397 ;; This function calls:
  1398 ;;		Nothing
  1399 ;; This function is called by:
  1400 ;;		_loop
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text3
  1405  000A4A                     __ptext3:
  1406                           	opt stack 0
  1407  000A4A                     _setStatus:
  1408                           	opt stack 27
  1409                           
  1410                           ;main.c: 37: status = s;
  1411                           
  1412                           ;incstack = 0
  1413  000A4A  C00F  F031         	movff	setStatus@s,_status
  1414  000A4E  C010  F032         	movff	setStatus@s+1,_status+1
  1415                           
  1416                           ;main.c: 38: flagStatus = 1;
  1417  000A52  0E01               	movlw	1
  1418  000A54  6E35               	movwf	_flagStatus,c
  1419  000A56  0012               	return		;funcret
  1420  000A58                     __end_of_setStatus:
  1421                           	opt stack 0
  1422                           tblptru	equ	0xFF8
  1423                           postinc0	equ	0xFEE
  1424                           wreg	equ	0xFE8
  1425                           status	equ	0xFD8
  1426                           
  1427 ;; *************** function _setMotors *****************
  1428 ;; Defined at:
  1429 ;;		line 44 in file "motors.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;  left            2   26[COMRAM] int 
  1432 ;;  right           2   28[COMRAM] int 
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;		None
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      void 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2, status,0, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1444 ;;      Params:         4       0       0       0       0       0       0       0       0
  1445 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1446 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1447 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1448 ;;Total ram usage:        4 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; Hardware stack levels required when called:    4
  1451 ;; This function calls:
  1452 ;;		_setLeftMotor
  1453 ;;		_setRightMotor
  1454 ;; This function is called by:
  1455 ;;		_loop
  1456 ;; This function uses a non-reentrant model
  1457 ;;
  1458                           
  1459                           	psect	text4
  1460  0009BA                     __ptext4:
  1461                           	opt stack 0
  1462  0009BA                     _setMotors:
  1463                           	opt stack 25
  1464                           
  1465                           ;motors.c: 45: setLeftMotor(left);
  1466                           
  1467                           ;incstack = 0
  1468  0009BA  C01B  F017         	movff	setMotors@left,setLeftMotor@speed
  1469  0009BE  C01C  F018         	movff	setMotors@left+1,setLeftMotor@speed+1
  1470  0009C2  ECED  F002         	call	_setLeftMotor	;wreg free
  1471                           
  1472                           ;motors.c: 46: setRightMotor(right);
  1473  0009C6  C01D  F017         	movff	setMotors@right,setRightMotor@speed
  1474  0009CA  C01E  F018         	movff	setMotors@right+1,setRightMotor@speed+1
  1475  0009CE  EC52  F003         	call	_setRightMotor	;wreg free
  1476  0009D2  0012               	return		;funcret
  1477  0009D4                     __end_of_setMotors:
  1478                           	opt stack 0
  1479                           tblptru	equ	0xFF8
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _setLEDs *****************
  1485 ;; Defined at:
  1486 ;;		line 32 in file "ui.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  r               1    wreg     unsigned char 
  1489 ;;  y               1   15[COMRAM] unsigned char 
  1490 ;;  g               1   16[COMRAM] unsigned char 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  r               1   17[COMRAM] unsigned char 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  1    wreg      void 
  1495 ;; Registers used:
  1496 ;;		wreg, status,2, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1502 ;;      Params:         2       0       0       0       0       0       0       0       0
  1503 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1504 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1505 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1506 ;;Total ram usage:        3 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    3
  1509 ;; This function calls:
  1510 ;;		_setLEDG
  1511 ;;		_setLEDR
  1512 ;;		_setLEDY
  1513 ;; This function is called by:
  1514 ;;		_loop
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text5
  1519  0009EE                     __ptext5:
  1520                           	opt stack 0
  1521  0009EE                     _setLEDs:
  1522                           	opt stack 26
  1523                           
  1524                           ;incstack = 0
  1525                           ;setLEDs@r stored from wreg
  1526  0009EE  6E12               	movwf	setLEDs@r,c
  1527                           
  1528                           ;ui.c: 33: setLEDR(r);
  1529  0009F0  5012               	movf	setLEDs@r,w,c
  1530  0009F2  EC33  F005         	call	_setLEDR
  1531                           
  1532                           ;ui.c: 34: setLEDY(y);
  1533  0009F6  5010               	movf	setLEDs@y,w,c
  1534  0009F8  EC2C  F005         	call	_setLEDY
  1535                           
  1536                           ;ui.c: 35: setLEDG(g);
  1537  0009FC  5011               	movf	setLEDs@g,w,c
  1538  0009FE  EC3A  F005         	call	_setLEDG
  1539  000A02  0012               	return		;funcret
  1540  000A04                     __end_of_setLEDs:
  1541                           	opt stack 0
  1542                           tblptru	equ	0xFF8
  1543                           postinc0	equ	0xFEE
  1544                           wreg	equ	0xFE8
  1545                           status	equ	0xFD8
  1546                           
  1547 ;; *************** function _setLEDY *****************
  1548 ;; Defined at:
  1549 ;;		line 54 in file "ui.c"
  1550 ;; Parameters:    Size  Location     Type
  1551 ;;  v               1    wreg     unsigned char 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  v               1   14[COMRAM] unsigned char 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;                  1    wreg      void 
  1556 ;; Registers used:
  1557 ;;		wreg
  1558 ;; Tracked objects:
  1559 ;;		On entry : 0/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1563 ;;      Params:         0       0       0       0       0       0       0       0       0
  1564 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1565 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1566 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1567 ;;Total ram usage:        1 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    2
  1570 ;; This function calls:
  1571 ;;		Nothing
  1572 ;; This function is called by:
  1573 ;;		_loop
  1574 ;;		_setLEDs
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text6
  1579  000A58                     __ptext6:
  1580                           	opt stack 0
  1581  000A58                     _setLEDY:
  1582                           	opt stack 26
  1583                           
  1584                           ;incstack = 0
  1585                           ;setLEDY@v stored from wreg
  1586  000A58  6E0F               	movwf	setLEDY@v,c
  1587                           
  1588                           ;ui.c: 55: LATAbits.LATA3 = v;
  1589  000A5A  B00F               	btfsc	setLEDY@v,0,c
  1590  000A5C  D002               	bra	u285
  1591  000A5E  9689               	bcf	3977,3,c	;volatile
  1592  000A60  D001               	bra	u286
  1593  000A62                     u285:
  1594  000A62  8689               	bsf	3977,3,c	;volatile
  1595  000A64                     u286:
  1596  000A64  0012               	return		;funcret
  1597  000A66                     __end_of_setLEDY:
  1598                           	opt stack 0
  1599                           tblptru	equ	0xFF8
  1600                           postinc0	equ	0xFEE
  1601                           wreg	equ	0xFE8
  1602                           status	equ	0xFD8
  1603                           
  1604 ;; *************** function _setLEDR *****************
  1605 ;; Defined at:
  1606 ;;		line 50 in file "ui.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  v               1    wreg     unsigned char 
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  v               1   14[COMRAM] unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  1    wreg      void 
  1613 ;; Registers used:
  1614 ;;		wreg
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1620 ;;      Params:         0       0       0       0       0       0       0       0       0
  1621 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1623 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1624 ;;Total ram usage:        1 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    2
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_loop
  1631 ;;		_setLEDs
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text7
  1636  000A66                     __ptext7:
  1637                           	opt stack 0
  1638  000A66                     _setLEDR:
  1639                           	opt stack 26
  1640                           
  1641                           ;incstack = 0
  1642                           ;setLEDR@v stored from wreg
  1643  000A66  6E0F               	movwf	setLEDR@v,c
  1644                           
  1645                           ;ui.c: 51: LATAbits.LATA4 = v;
  1646  000A68  B00F               	btfsc	setLEDR@v,0,c
  1647  000A6A  D002               	bra	u275
  1648  000A6C  9889               	bcf	3977,4,c	;volatile
  1649  000A6E  D001               	bra	u276
  1650  000A70                     u275:
  1651  000A70  8889               	bsf	3977,4,c	;volatile
  1652  000A72                     u276:
  1653  000A72  0012               	return		;funcret
  1654  000A74                     __end_of_setLEDR:
  1655                           	opt stack 0
  1656                           tblptru	equ	0xFF8
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           status	equ	0xFD8
  1660                           
  1661 ;; *************** function _setLEDG *****************
  1662 ;; Defined at:
  1663 ;;		line 58 in file "ui.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;  v               1    wreg     unsigned char 
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;  v               1   14[COMRAM] unsigned char 
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  1    wreg      void 
  1670 ;; Registers used:
  1671 ;;		wreg
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1677 ;;      Params:         0       0       0       0       0       0       0       0       0
  1678 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1679 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1680 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1681 ;;Total ram usage:        1 bytes
  1682 ;; Hardware stack levels used:    1
  1683 ;; Hardware stack levels required when called:    2
  1684 ;; This function calls:
  1685 ;;		Nothing
  1686 ;; This function is called by:
  1687 ;;		_loop
  1688 ;;		_setLEDs
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           	psect	text8
  1693  000A74                     __ptext8:
  1694                           	opt stack 0
  1695  000A74                     _setLEDG:
  1696                           	opt stack 26
  1697                           
  1698                           ;incstack = 0
  1699                           ;setLEDG@v stored from wreg
  1700  000A74  6E0F               	movwf	setLEDG@v,c
  1701                           
  1702                           ;ui.c: 59: LATAbits.LATA2 = v;
  1703  000A76  B00F               	btfsc	setLEDG@v,0,c
  1704  000A78  D002               	bra	u295
  1705  000A7A  9489               	bcf	3977,2,c	;volatile
  1706  000A7C  D001               	bra	u296
  1707  000A7E                     u295:
  1708  000A7E  8489               	bsf	3977,2,c	;volatile
  1709  000A80                     u296:
  1710  000A80  0012               	return		;funcret
  1711  000A82                     __end_of_setLEDG:
  1712                           	opt stack 0
  1713                           tblptru	equ	0xFF8
  1714                           postinc0	equ	0xFEE
  1715                           wreg	equ	0xFE8
  1716                           status	equ	0xFD8
  1717                           
  1718 ;; *************** function _setBothMotors *****************
  1719 ;; Defined at:
  1720 ;;		line 49 in file "motors.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;  speed           2   26[COMRAM] int 
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      void 
  1727 ;; Registers used:
  1728 ;;		wreg, status,2, status,0, cstack
  1729 ;; Tracked objects:
  1730 ;;		On entry : 0/0
  1731 ;;		On exit  : 0/0
  1732 ;;		Unchanged: 0/0
  1733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1734 ;;      Params:         2       0       0       0       0       0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1737 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1738 ;;Total ram usage:        2 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    4
  1741 ;; This function calls:
  1742 ;;		_setLeftMotor
  1743 ;;		_setRightMotor
  1744 ;; This function is called by:
  1745 ;;		_loop
  1746 ;; This function uses a non-reentrant model
  1747 ;;
  1748                           
  1749                           	psect	text9
  1750  0009D4                     __ptext9:
  1751                           	opt stack 0
  1752  0009D4                     _setBothMotors:
  1753                           	opt stack 25
  1754                           
  1755                           ;motors.c: 50: setLeftMotor(speed);
  1756                           
  1757                           ;incstack = 0
  1758  0009D4  C01B  F017         	movff	setBothMotors@speed,setLeftMotor@speed
  1759  0009D8  C01C  F018         	movff	setBothMotors@speed+1,setLeftMotor@speed+1
  1760  0009DC  ECED  F002         	call	_setLeftMotor	;wreg free
  1761                           
  1762                           ;motors.c: 51: setRightMotor(speed);
  1763  0009E0  C01B  F017         	movff	setBothMotors@speed,setRightMotor@speed
  1764  0009E4  C01C  F018         	movff	setBothMotors@speed+1,setRightMotor@speed+1
  1765  0009E8  EC52  F003         	call	_setRightMotor	;wreg free
  1766  0009EC  0012               	return		;funcret
  1767  0009EE                     __end_of_setBothMotors:
  1768                           	opt stack 0
  1769                           tblptru	equ	0xFF8
  1770                           postinc0	equ	0xFEE
  1771                           wreg	equ	0xFE8
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _setRightMotor *****************
  1775 ;; Defined at:
  1776 ;;		line 64 in file "motors.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  speed           2   22[COMRAM] int 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2, status,0, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1790 ;;      Params:         2       0       0       0       0       0       0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1792 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1793 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1794 ;;Total ram usage:        4 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    3
  1797 ;; This function calls:
  1798 ;;		___awdiv
  1799 ;; This function is called by:
  1800 ;;		_setMotors
  1801 ;;		_setBothMotors
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text10
  1806  0006A4                     __ptext10:
  1807                           	opt stack 0
  1808  0006A4                     _setRightMotor:
  1809                           	opt stack 25
  1810                           
  1811                           ;motors.c: 65: LATBbits.LATB1 = speed >= 0;
  1812                           
  1813                           ;incstack = 0
  1814  0006A4  BE18               	btfsc	setRightMotor@speed+1,7,c
  1815  0006A6  D003               	goto	u1110
  1816  0006A8  6A19               	clrf	??_setRightMotor& (0+255),c
  1817  0006AA  2A19               	incf	??_setRightMotor& (0+255),f,c
  1818  0006AC  D001               	goto	u1128
  1819  0006AE                     u1110:
  1820  0006AE  6A19               	clrf	??_setRightMotor& (0+255),c
  1821  0006B0                     u1128:
  1822  0006B0  4619               	rlncf	??_setRightMotor,f,c
  1823  0006B2  508A               	movf	3978,w,c	;volatile
  1824  0006B4  1819               	xorwf	??_setRightMotor,w,c
  1825  0006B6  0BFD               	andlw	-3
  1826  0006B8  1819               	xorwf	??_setRightMotor,w,c
  1827  0006BA  6E8A               	movwf	3978,c	;volatile
  1828                           
  1829                           ;motors.c: 66: LATBbits.LATB0 = speed <= 0;
  1830  0006BC  BE18               	btfsc	setRightMotor@speed+1,7,c
  1831  0006BE  D005               	goto	u1131
  1832  0006C0  5018               	movf	setRightMotor@speed+1,w,c
  1833  0006C2  E106               	bnz	u1130
  1834  0006C4  0417               	decf	setRightMotor@speed,w,c
  1835  0006C6  B0D8               	btfsc	status,0,c
  1836  0006C8  D003               	goto	u1130
  1837  0006CA                     u1131:
  1838  0006CA  6A19               	clrf	??_setRightMotor& (0+255),c
  1839  0006CC  2A19               	incf	??_setRightMotor& (0+255),f,c
  1840  0006CE  D001               	goto	u1148
  1841  0006D0                     u1130:
  1842  0006D0  6A19               	clrf	??_setRightMotor& (0+255),c
  1843  0006D2                     u1148:
  1844  0006D2  508A               	movf	3978,w,c	;volatile
  1845  0006D4  1819               	xorwf	??_setRightMotor,w,c
  1846  0006D6  0BFE               	andlw	-2
  1847  0006D8  1819               	xorwf	??_setRightMotor,w,c
  1848  0006DA  6E8A               	movwf	3978,c	;volatile
  1849                           
  1850                           ;motors.c: 67: if(speed < 0) speed = -speed;
  1851  0006DC  AE18               	btfss	setRightMotor@speed+1,7,c
  1852  0006DE  D004               	goto	l1498
  1853  0006E0  6C17               	negf	setRightMotor@speed,c
  1854  0006E2  1E18               	comf	setRightMotor@speed+1,f,c
  1855  0006E4  B0D8               	btfsc	status,0,c
  1856  0006E6  2A18               	incf	setRightMotor@speed+1,f,c
  1857  0006E8                     l1498:
  1858                           
  1859                           ;motors.c: 68: if(speed > 1000 || speed == 0) speed = 1000;
  1860  0006E8  BE18               	btfsc	setRightMotor@speed+1,7,c
  1861  0006EA  D006               	goto	l1500
  1862  0006EC  0EE9               	movlw	233
  1863  0006EE  5C17               	subwf	setRightMotor@speed,w,c
  1864  0006F0  0E03               	movlw	3
  1865  0006F2  5818               	subwfb	setRightMotor@speed+1,w,c
  1866  0006F4  B0D8               	btfsc	status,0,c
  1867  0006F6  D004               	goto	l1502
  1868  0006F8                     l1500:
  1869  0006F8  5017               	movf	setRightMotor@speed,w,c
  1870  0006FA  1018               	iorwf	setRightMotor@speed+1,w,c
  1871  0006FC  A4D8               	btfss	status,2,c
  1872  0006FE  D004               	goto	l1504
  1873  000700                     l1502:
  1874  000700  0E03               	movlw	3
  1875  000702  6E18               	movwf	setRightMotor@speed+1,c
  1876  000704  0EE8               	movlw	232
  1877  000706  6E17               	movwf	setRightMotor@speed,c
  1878  000708                     l1504:
  1879                           
  1880                           ;motors.c: 69: speed = speed * 1024 / 1000;
  1881  000708  C017  F019         	movff	setRightMotor@speed,??_setRightMotor
  1882  00070C  C018  F01A         	movff	setRightMotor@speed+1,??_setRightMotor+1
  1883  000710  0E0A               	movlw	10
  1884  000712                     u1185:
  1885  000712  90D8               	bcf	status,0,c
  1886  000714  3619               	rlcf	??_setRightMotor,f,c
  1887  000716  361A               	rlcf	??_setRightMotor+1,f,c
  1888  000718  2EE8               	decfsz	wreg,f,c
  1889  00071A  D7FB               	goto	u1185
  1890  00071C  C019  F00F         	movff	??_setRightMotor,___awdiv@dividend
  1891  000720  C01A  F010         	movff	??_setRightMotor+1,___awdiv@dividend+1
  1892  000724  0E03               	movlw	3
  1893  000726  6E12               	movwf	___awdiv@divisor+1,c
  1894  000728  0EE8               	movlw	232
  1895  00072A  6E11               	movwf	___awdiv@divisor,c
  1896  00072C  ECB3  F003         	call	___awdiv	;wreg free
  1897  000730  C00F  F017         	movff	?___awdiv,setRightMotor@speed
  1898  000734  C010  F018         	movff	?___awdiv+1,setRightMotor@speed+1
  1899                           
  1900                           ;motors.c: 70: CCP1CONbits.DC1B = speed & 3;
  1901  000738  C017  F019         	movff	setRightMotor@speed,??_setRightMotor
  1902  00073C  0E03               	movlw	3
  1903  00073E  1619               	andwf	??_setRightMotor,f,c
  1904  000740  3A19               	swapf	??_setRightMotor,f,c
  1905  000742  50BD               	movf	4029,w,c	;volatile
  1906  000744  1819               	xorwf	??_setRightMotor,w,c
  1907  000746  0BCF               	andlw	-49
  1908  000748  1819               	xorwf	??_setRightMotor,w,c
  1909  00074A  6EBD               	movwf	4029,c	;volatile
  1910                           
  1911                           ;motors.c: 71: CCPR1L = speed >> 2;
  1912  00074C  C017  F019         	movff	setRightMotor@speed,??_setRightMotor
  1913  000750  C018  F01A         	movff	setRightMotor@speed+1,??_setRightMotor+1
  1914  000754  341A               	rlcf	??_setRightMotor+1,w,c
  1915  000756  321A               	rrcf	??_setRightMotor+1,f,c
  1916  000758  3219               	rrcf	??_setRightMotor,f,c
  1917  00075A  341A               	rlcf	??_setRightMotor+1,w,c
  1918  00075C  321A               	rrcf	??_setRightMotor+1,f,c
  1919  00075E  3219               	rrcf	??_setRightMotor,f,c
  1920  000760  5019               	movf	??_setRightMotor,w,c
  1921  000762  6EBE               	movwf	4030,c	;volatile
  1922  000764  0012               	return		;funcret
  1923  000766                     __end_of_setRightMotor:
  1924                           	opt stack 0
  1925                           tblptru	equ	0xFF8
  1926                           postinc0	equ	0xFEE
  1927                           wreg	equ	0xFE8
  1928                           status	equ	0xFD8
  1929                           
  1930 ;; *************** function _setLeftMotor *****************
  1931 ;; Defined at:
  1932 ;;		line 54 in file "motors.c"
  1933 ;; Parameters:    Size  Location     Type
  1934 ;;  speed           2   22[COMRAM] int 
  1935 ;; Auto vars:     Size  Location     Type
  1936 ;;		None
  1937 ;; Return value:  Size  Location     Type
  1938 ;;                  1    wreg      void 
  1939 ;; Registers used:
  1940 ;;		wreg, status,2, status,0, cstack
  1941 ;; Tracked objects:
  1942 ;;		On entry : 0/0
  1943 ;;		On exit  : 0/0
  1944 ;;		Unchanged: 0/0
  1945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1946 ;;      Params:         2       0       0       0       0       0       0       0       0
  1947 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1948 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1949 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1950 ;;Total ram usage:        4 bytes
  1951 ;; Hardware stack levels used:    1
  1952 ;; Hardware stack levels required when called:    3
  1953 ;; This function calls:
  1954 ;;		___awdiv
  1955 ;; This function is called by:
  1956 ;;		_setMotors
  1957 ;;		_setBothMotors
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	text11
  1962  0005DA                     __ptext11:
  1963                           	opt stack 0
  1964  0005DA                     _setLeftMotor:
  1965                           	opt stack 25
  1966                           
  1967                           ;motors.c: 55: LATCbits.LATC6 = speed >= 0;
  1968                           
  1969                           ;incstack = 0
  1970  0005DA  BE18               	btfsc	setLeftMotor@speed+1,7,c
  1971  0005DC  D003               	goto	u1030
  1972  0005DE  6A19               	clrf	??_setLeftMotor& (0+255),c
  1973  0005E0  2A19               	incf	??_setLeftMotor& (0+255),f,c
  1974  0005E2  D001               	goto	u1048
  1975  0005E4                     u1030:
  1976  0005E4  6A19               	clrf	??_setLeftMotor& (0+255),c
  1977  0005E6                     u1048:
  1978  0005E6  3A19               	swapf	??_setLeftMotor,f,c
  1979  0005E8  4619               	rlncf	??_setLeftMotor,f,c
  1980  0005EA  4619               	rlncf	??_setLeftMotor,f,c
  1981  0005EC  508B               	movf	3979,w,c	;volatile
  1982  0005EE  1819               	xorwf	??_setLeftMotor,w,c
  1983  0005F0  0BBF               	andlw	-65
  1984  0005F2  1819               	xorwf	??_setLeftMotor,w,c
  1985  0005F4  6E8B               	movwf	3979,c	;volatile
  1986                           
  1987                           ;motors.c: 56: LATCbits.LATC7 = speed <= 0;
  1988  0005F6  BE18               	btfsc	setLeftMotor@speed+1,7,c
  1989  0005F8  D005               	goto	u1051
  1990  0005FA  5018               	movf	setLeftMotor@speed+1,w,c
  1991  0005FC  E106               	bnz	u1050
  1992  0005FE  0417               	decf	setLeftMotor@speed,w,c
  1993  000600  B0D8               	btfsc	status,0,c
  1994  000602  D003               	goto	u1050
  1995  000604                     u1051:
  1996  000604  6A19               	clrf	??_setLeftMotor& (0+255),c
  1997  000606  2A19               	incf	??_setLeftMotor& (0+255),f,c
  1998  000608  D001               	goto	u1068
  1999  00060A                     u1050:
  2000  00060A  6A19               	clrf	??_setLeftMotor& (0+255),c
  2001  00060C                     u1068:
  2002  00060C  3219               	rrcf	??_setLeftMotor,f,c
  2003  00060E  3219               	rrcf	??_setLeftMotor,f,c
  2004  000610  508B               	movf	3979,w,c	;volatile
  2005  000612  1819               	xorwf	??_setLeftMotor,w,c
  2006  000614  0B7F               	andlw	-129
  2007  000616  1819               	xorwf	??_setLeftMotor,w,c
  2008  000618  6E8B               	movwf	3979,c	;volatile
  2009                           
  2010                           ;motors.c: 57: if(speed < 0) speed = -speed;
  2011  00061A  AE18               	btfss	setLeftMotor@speed+1,7,c
  2012  00061C  D004               	goto	l1482
  2013  00061E  6C17               	negf	setLeftMotor@speed,c
  2014  000620  1E18               	comf	setLeftMotor@speed+1,f,c
  2015  000622  B0D8               	btfsc	status,0,c
  2016  000624  2A18               	incf	setLeftMotor@speed+1,f,c
  2017  000626                     l1482:
  2018                           
  2019                           ;motors.c: 58: if(speed > 1000 || speed == 0) speed = 1000;
  2020  000626  BE18               	btfsc	setLeftMotor@speed+1,7,c
  2021  000628  D006               	goto	l1484
  2022  00062A  0EE9               	movlw	233
  2023  00062C  5C17               	subwf	setLeftMotor@speed,w,c
  2024  00062E  0E03               	movlw	3
  2025  000630  5818               	subwfb	setLeftMotor@speed+1,w,c
  2026  000632  B0D8               	btfsc	status,0,c
  2027  000634  D004               	goto	l1486
  2028  000636                     l1484:
  2029  000636  5017               	movf	setLeftMotor@speed,w,c
  2030  000638  1018               	iorwf	setLeftMotor@speed+1,w,c
  2031  00063A  A4D8               	btfss	status,2,c
  2032  00063C  D004               	goto	l1488
  2033  00063E                     l1486:
  2034  00063E  0E03               	movlw	3
  2035  000640  6E18               	movwf	setLeftMotor@speed+1,c
  2036  000642  0EE8               	movlw	232
  2037  000644  6E17               	movwf	setLeftMotor@speed,c
  2038  000646                     l1488:
  2039                           
  2040                           ;motors.c: 59: speed = speed * 1024 / 1000;
  2041  000646  C017  F019         	movff	setLeftMotor@speed,??_setLeftMotor
  2042  00064A  C018  F01A         	movff	setLeftMotor@speed+1,??_setLeftMotor+1
  2043  00064E  0E0A               	movlw	10
  2044  000650                     u1105:
  2045  000650  90D8               	bcf	status,0,c
  2046  000652  3619               	rlcf	??_setLeftMotor,f,c
  2047  000654  361A               	rlcf	??_setLeftMotor+1,f,c
  2048  000656  2EE8               	decfsz	wreg,f,c
  2049  000658  D7FB               	goto	u1105
  2050  00065A  C019  F00F         	movff	??_setLeftMotor,___awdiv@dividend
  2051  00065E  C01A  F010         	movff	??_setLeftMotor+1,___awdiv@dividend+1
  2052  000662  0E03               	movlw	3
  2053  000664  6E12               	movwf	___awdiv@divisor+1,c
  2054  000666  0EE8               	movlw	232
  2055  000668  6E11               	movwf	___awdiv@divisor,c
  2056  00066A  ECB3  F003         	call	___awdiv	;wreg free
  2057  00066E  C00F  F017         	movff	?___awdiv,setLeftMotor@speed
  2058  000672  C010  F018         	movff	?___awdiv+1,setLeftMotor@speed+1
  2059                           
  2060                           ;motors.c: 60: CCP2CONbits.DC2B = speed & 3;
  2061  000676  C017  F019         	movff	setLeftMotor@speed,??_setLeftMotor
  2062  00067A  0E03               	movlw	3
  2063  00067C  1619               	andwf	??_setLeftMotor,f,c
  2064  00067E  3A19               	swapf	??_setLeftMotor,f,c
  2065  000680  50BA               	movf	4026,w,c	;volatile
  2066  000682  1819               	xorwf	??_setLeftMotor,w,c
  2067  000684  0BCF               	andlw	-49
  2068  000686  1819               	xorwf	??_setLeftMotor,w,c
  2069  000688  6EBA               	movwf	4026,c	;volatile
  2070                           
  2071                           ;motors.c: 61: CCPR2L = speed >> 2;
  2072  00068A  C017  F019         	movff	setLeftMotor@speed,??_setLeftMotor
  2073  00068E  C018  F01A         	movff	setLeftMotor@speed+1,??_setLeftMotor+1
  2074  000692  341A               	rlcf	??_setLeftMotor+1,w,c
  2075  000694  321A               	rrcf	??_setLeftMotor+1,f,c
  2076  000696  3219               	rrcf	??_setLeftMotor,f,c
  2077  000698  341A               	rlcf	??_setLeftMotor+1,w,c
  2078  00069A  321A               	rrcf	??_setLeftMotor+1,f,c
  2079  00069C  3219               	rrcf	??_setLeftMotor,f,c
  2080  00069E  5019               	movf	??_setLeftMotor,w,c
  2081  0006A0  6EBB               	movwf	4027,c	;volatile
  2082  0006A2  0012               	return		;funcret
  2083  0006A4                     __end_of_setLeftMotor:
  2084                           	opt stack 0
  2085                           tblptru	equ	0xFF8
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           status	equ	0xFD8
  2089                           
  2090 ;; *************** function ___awdiv *****************
  2091 ;; Defined at:
  2092 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  dividend        2   14[COMRAM] int 
  2095 ;;  divisor         2   16[COMRAM] int 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  quotient        2   20[COMRAM] int 
  2098 ;;  sign            1   19[COMRAM] unsigned char 
  2099 ;;  counter         1   18[COMRAM] unsigned char 
  2100 ;; Return value:  Size  Location     Type
  2101 ;;                  2   14[COMRAM] int 
  2102 ;; Registers used:
  2103 ;;		wreg, status,2, status,0
  2104 ;; Tracked objects:
  2105 ;;		On entry : 0/0
  2106 ;;		On exit  : 0/0
  2107 ;;		Unchanged: 0/0
  2108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2109 ;;      Params:         4       0       0       0       0       0       0       0       0
  2110 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2111 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2112 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2113 ;;Total ram usage:        8 bytes
  2114 ;; Hardware stack levels used:    1
  2115 ;; Hardware stack levels required when called:    2
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_setLeftMotor
  2120 ;;		_setRightMotor
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text12
  2125  000766                     __ptext12:
  2126                           	opt stack 0
  2127  000766                     ___awdiv:
  2128                           	opt stack 25
  2129                           
  2130                           ;incstack = 0
  2131  000766  0E00               	movlw	0
  2132  000768  6E14               	movwf	___awdiv@sign,c
  2133  00076A  AE12               	btfss	___awdiv@divisor+1,7,c
  2134  00076C  D006               	goto	l1442
  2135  00076E  6C11               	negf	___awdiv@divisor,c
  2136  000770  1E12               	comf	___awdiv@divisor+1,f,c
  2137  000772  B0D8               	btfsc	status,0,c
  2138  000774  2A12               	incf	___awdiv@divisor+1,f,c
  2139  000776  0E01               	movlw	1
  2140  000778  6E14               	movwf	___awdiv@sign,c
  2141  00077A                     l1442:
  2142  00077A  AE10               	btfss	___awdiv@dividend+1,7,c
  2143  00077C  D006               	goto	l1448
  2144  00077E  6C0F               	negf	___awdiv@dividend,c
  2145  000780  1E10               	comf	___awdiv@dividend+1,f,c
  2146  000782  B0D8               	btfsc	status,0,c
  2147  000784  2A10               	incf	___awdiv@dividend+1,f,c
  2148  000786  0E01               	movlw	1
  2149  000788  1A14               	xorwf	___awdiv@sign,f,c
  2150  00078A                     l1448:
  2151  00078A  0E00               	movlw	0
  2152  00078C  6E16               	movwf	___awdiv@quotient+1,c
  2153  00078E  0E00               	movlw	0
  2154  000790  6E15               	movwf	___awdiv@quotient,c
  2155  000792  5011               	movf	___awdiv@divisor,w,c
  2156  000794  1012               	iorwf	___awdiv@divisor+1,w,c
  2157  000796  B4D8               	btfsc	status,2,c
  2158  000798  D01C               	goto	l1470
  2159  00079A  0E01               	movlw	1
  2160  00079C  6E13               	movwf	___awdiv@counter,c
  2161  00079E  D004               	goto	l1456
  2162  0007A0                     l1454:
  2163  0007A0  90D8               	bcf	status,0,c
  2164  0007A2  3611               	rlcf	___awdiv@divisor,f,c
  2165  0007A4  3612               	rlcf	___awdiv@divisor+1,f,c
  2166  0007A6  2A13               	incf	___awdiv@counter,f,c
  2167  0007A8                     l1456:
  2168  0007A8  AE12               	btfss	___awdiv@divisor+1,7,c
  2169  0007AA  D7FA               	goto	l1454
  2170  0007AC                     l1458:
  2171  0007AC  90D8               	bcf	status,0,c
  2172  0007AE  3615               	rlcf	___awdiv@quotient,f,c
  2173  0007B0  3616               	rlcf	___awdiv@quotient+1,f,c
  2174  0007B2  5011               	movf	___awdiv@divisor,w,c
  2175  0007B4  5C0F               	subwf	___awdiv@dividend,w,c
  2176  0007B6  5012               	movf	___awdiv@divisor+1,w,c
  2177  0007B8  5810               	subwfb	___awdiv@dividend+1,w,c
  2178  0007BA  A0D8               	btfss	status,0,c
  2179  0007BC  D005               	goto	l1466
  2180  0007BE  5011               	movf	___awdiv@divisor,w,c
  2181  0007C0  5E0F               	subwf	___awdiv@dividend,f,c
  2182  0007C2  5012               	movf	___awdiv@divisor+1,w,c
  2183  0007C4  5A10               	subwfb	___awdiv@dividend+1,f,c
  2184  0007C6  8015               	bsf	___awdiv@quotient,0,c
  2185  0007C8                     l1466:
  2186  0007C8  90D8               	bcf	status,0,c
  2187  0007CA  3212               	rrcf	___awdiv@divisor+1,f,c
  2188  0007CC  3211               	rrcf	___awdiv@divisor,f,c
  2189  0007CE  2E13               	decfsz	___awdiv@counter,f,c
  2190  0007D0  D7ED               	goto	l1458
  2191  0007D2                     l1470:
  2192  0007D2  5014               	movf	___awdiv@sign,w,c
  2193  0007D4  B4D8               	btfsc	status,2,c
  2194  0007D6  D004               	goto	l1474
  2195  0007D8  6C15               	negf	___awdiv@quotient,c
  2196  0007DA  1E16               	comf	___awdiv@quotient+1,f,c
  2197  0007DC  B0D8               	btfsc	status,0,c
  2198  0007DE  2A16               	incf	___awdiv@quotient+1,f,c
  2199  0007E0                     l1474:
  2200  0007E0  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  2201  0007E4  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  2202  0007E8  0012               	return	
  2203  0007EA                     __end_of___awdiv:
  2204                           	opt stack 0
  2205                           tblptru	equ	0xFF8
  2206                           postinc0	equ	0xFEE
  2207                           wreg	equ	0xFE8
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _newStatus *****************
  2211 ;; Defined at:
  2212 ;;		line 41 in file "main.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;		None
  2215 ;; Auto vars:     Size  Location     Type
  2216 ;;  x               1   14[COMRAM] unsigned char 
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  1    wreg      unsigned char 
  2219 ;; Registers used:
  2220 ;;		wreg, status,2
  2221 ;; Tracked objects:
  2222 ;;		On entry : 0/0
  2223 ;;		On exit  : 0/0
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2226 ;;      Params:         0       0       0       0       0       0       0       0       0
  2227 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2228 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2229 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2230 ;;Total ram usage:        1 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; Hardware stack levels required when called:    2
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_loop
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text13
  2241  000A82                     __ptext13:
  2242                           	opt stack 0
  2243  000A82                     _newStatus:
  2244                           	opt stack 27
  2245                           
  2246                           ;main.c: 42: char x = flagStatus;
  2247                           
  2248                           ;incstack = 0
  2249  000A82  C035  F00F         	movff	_flagStatus,newStatus@x
  2250                           
  2251                           ;main.c: 43: flagStatus = 0;
  2252  000A86  0E00               	movlw	0
  2253  000A88  6E35               	movwf	_flagStatus,c
  2254                           
  2255                           ;main.c: 44: return x;
  2256  000A8A  500F               	movf	newStatus@x,w,c
  2257  000A8C  0012               	return	
  2258  000A8E                     __end_of_newStatus:
  2259                           	opt stack 0
  2260                           tblptru	equ	0xFF8
  2261                           postinc0	equ	0xFEE
  2262                           wreg	equ	0xFE8
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function _millis *****************
  2266 ;; Defined at:
  2267 ;;		line 7 in file "timer.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;		None
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;		None
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  4   14[COMRAM] unsigned long 
  2274 ;; Registers used:
  2275 ;;		None
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2281 ;;      Params:         4       0       0       0       0       0       0       0       0
  2282 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2283 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2284 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2285 ;;Total ram usage:        4 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    2
  2288 ;; This function calls:
  2289 ;;		Nothing
  2290 ;; This function is called by:
  2291 ;;		_loop
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text14
  2296  000A04                     __ptext14:
  2297                           	opt stack 0
  2298  000A04                     _millis:
  2299                           	opt stack 27
  2300                           
  2301                           ;timer.c: 8: return millisCounter;
  2302                           
  2303                           ;incstack = 0
  2304  000A04  C02B  F00F         	movff	_millisCounter,?_millis
  2305  000A08  C02C  F010         	movff	_millisCounter+1,?_millis+1
  2306  000A0C  C02D  F011         	movff	_millisCounter+2,?_millis+2
  2307  000A10  C02E  F012         	movff	_millisCounter+3,?_millis+3
  2308  000A14  0012               	return		;funcret
  2309  000A16                     __end_of_millis:
  2310                           	opt stack 0
  2311                           tblptru	equ	0xFF8
  2312                           postinc0	equ	0xFEE
  2313                           wreg	equ	0xFE8
  2314                           status	equ	0xFD8
  2315                           
  2316 ;; *************** function _initUI *****************
  2317 ;; Defined at:
  2318 ;;		line 18 in file "ui.c"
  2319 ;; Parameters:    Size  Location     Type
  2320 ;;		None
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;		None
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  1    wreg      void 
  2325 ;; Registers used:
  2326 ;;		None
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2332 ;;      Params:         0       0       0       0       0       0       0       0       0
  2333 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2335 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2336 ;;Total ram usage:        0 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    2
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_loop
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text15
  2347  000A16                     __ptext15:
  2348                           	opt stack 0
  2349  000A16                     _initUI:
  2350                           	opt stack 27
  2351                           
  2352                           ;ui.c: 19: TRISAbits.RA4 = 0;
  2353                           
  2354                           ;incstack = 0
  2355  000A16  9892               	bcf	3986,4,c	;volatile
  2356                           
  2357                           ;ui.c: 20: LATAbits.LATA4 = 0;
  2358  000A18  9889               	bcf	3977,4,c	;volatile
  2359                           
  2360                           ;ui.c: 22: TRISAbits.RA3 = 0;
  2361  000A1A  9692               	bcf	3986,3,c	;volatile
  2362                           
  2363                           ;ui.c: 23: LATAbits.LATA3 = 0;
  2364  000A1C  9689               	bcf	3977,3,c	;volatile
  2365                           
  2366                           ;ui.c: 25: TRISAbits.RA2 = 0;
  2367  000A1E  9492               	bcf	3986,2,c	;volatile
  2368                           
  2369                           ;ui.c: 26: LATAbits.LATA2 = 0;
  2370  000A20  9489               	bcf	3977,2,c	;volatile
  2371                           
  2372                           ;ui.c: 28: TRISAbits.RA1 = 1;
  2373  000A22  8292               	bsf	3986,1,c	;volatile
  2374                           
  2375                           ;ui.c: 29: TRISAbits.RA0 = 1;
  2376  000A24  8092               	bsf	3986,0,c	;volatile
  2377  000A26  0012               	return		;funcret
  2378  000A28                     __end_of_initUI:
  2379                           	opt stack 0
  2380                           tblptru	equ	0xFF8
  2381                           postinc0	equ	0xFEE
  2382                           wreg	equ	0xFE8
  2383                           status	equ	0xFD8
  2384                           
  2385 ;; *************** function _initTimer *****************
  2386 ;; Defined at:
  2387 ;;		line 22 in file "timer.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;		None
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		wreg, status,2
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2401 ;;      Params:         0       0       0       0       0       0       0       0       0
  2402 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2403 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2404 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2405 ;;Total ram usage:        0 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    2
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_loop
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text16
  2416  000ACA                     __ptext16:
  2417                           	opt stack 0
  2418  000ACA                     _initTimer:
  2419                           	opt stack 27
  2420                           
  2421                           ;timer.c: 23: INTCONbits.TMR0IF = 0;
  2422                           
  2423                           ;incstack = 0
  2424  000ACA  94F2               	bcf	intcon,2,c	;volatile
  2425                           
  2426                           ;timer.c: 24: INTCONbits.TMR0IE = 1;
  2427  000ACC  8AF2               	bsf	intcon,5,c	;volatile
  2428                           
  2429                           ;timer.c: 25: T0CON = 0xC4;
  2430  000ACE  0EC4               	movlw	196
  2431  000AD0  6ED5               	movwf	4053,c	;volatile
  2432  000AD2  0012               	return		;funcret
  2433  000AD4                     __end_of_initTimer:
  2434                           	opt stack 0
  2435                           tblptru	equ	0xFF8
  2436                           intcon	equ	0xFF2
  2437                           postinc0	equ	0xFEE
  2438                           wreg	equ	0xFE8
  2439                           status	equ	0xFD8
  2440                           
  2441 ;; *************** function _initSensors *****************
  2442 ;; Defined at:
  2443 ;;		line 22 in file "sensors.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;		None
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;		None
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		None
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2457 ;;      Params:         0       0       0       0       0       0       0       0       0
  2458 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2459 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2460 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2461 ;;Total ram usage:        0 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    2
  2464 ;; This function calls:
  2465 ;;		Nothing
  2466 ;; This function is called by:
  2467 ;;		_loop
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text17
  2472  000A3A                     __ptext17:
  2473                           	opt stack 0
  2474  000A3A                     _initSensors:
  2475                           	opt stack 27
  2476                           
  2477                           ;sensors.c: 23: TRISCbits.RC0 = 1;
  2478                           
  2479                           ;incstack = 0
  2480  000A3A  8094               	bsf	3988,0,c	;volatile
  2481                           
  2482                           ;sensors.c: 24: TRISAbits.RA5 = 1;
  2483  000A3C  8A92               	bsf	3986,5,c	;volatile
  2484                           
  2485                           ;sensors.c: 25: TRISBbits.RB5 = 1;
  2486  000A3E  8A93               	bsf	3987,5,c	;volatile
  2487                           
  2488                           ;sensors.c: 28: TRISBbits.RB2 = 0;
  2489  000A40  9493               	bcf	3987,2,c	;volatile
  2490                           
  2491                           ;sensors.c: 29: TRISBbits.RB4 = 1;
  2492  000A42  8893               	bsf	3987,4,c	;volatile
  2493                           
  2494                           ;sensors.c: 30: TRISBbits.RB3 = 1;
  2495  000A44  8693               	bsf	3987,3,c	;volatile
  2496                           
  2497                           ;sensors.c: 31: LATBbits.LB2 = 0;
  2498  000A46  948A               	bcf	3978,2,c	;volatile
  2499  000A48  0012               	return		;funcret
  2500  000A4A                     __end_of_initSensors:
  2501                           	opt stack 0
  2502                           tblptru	equ	0xFF8
  2503                           intcon	equ	0xFF2
  2504                           postinc0	equ	0xFEE
  2505                           wreg	equ	0xFE8
  2506                           status	equ	0xFD8
  2507                           
  2508 ;; *************** function _initMotors *****************
  2509 ;; Defined at:
  2510 ;;		line 17 in file "motors.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;		None
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;		None
  2515 ;; Return value:  Size  Location     Type
  2516 ;;                  1    wreg      void 
  2517 ;; Registers used:
  2518 ;;		wreg, status,2
  2519 ;; Tracked objects:
  2520 ;;		On entry : 0/0
  2521 ;;		On exit  : 0/0
  2522 ;;		Unchanged: 0/0
  2523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2524 ;;      Params:         0       0       0       0       0       0       0       0       0
  2525 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2526 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2527 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2528 ;;Total ram usage:        0 bytes
  2529 ;; Hardware stack levels used:    1
  2530 ;; Hardware stack levels required when called:    2
  2531 ;; This function calls:
  2532 ;;		Nothing
  2533 ;; This function is called by:
  2534 ;;		_loop
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text18
  2539  0008CC                     __ptext18:
  2540                           	opt stack 0
  2541  0008CC                     _initMotors:
  2542                           	opt stack 27
  2543                           
  2544                           ;motors.c: 18: TRISBbits.TRISB1 = 0;
  2545                           
  2546                           ;incstack = 0
  2547  0008CC  9293               	bcf	3987,1,c	;volatile
  2548                           
  2549                           ;motors.c: 19: TRISBbits.TRISB0 = 0;
  2550  0008CE  9093               	bcf	3987,0,c	;volatile
  2551                           
  2552                           ;motors.c: 20: TRISCbits.TRISC6 = 0;
  2553  0008D0  9C94               	bcf	3988,6,c	;volatile
  2554                           
  2555                           ;motors.c: 21: TRISCbits.TRISC7 = 0;
  2556  0008D2  9E94               	bcf	3988,7,c	;volatile
  2557                           
  2558                           ;motors.c: 23: LATBbits.LATB1 = 0;
  2559  0008D4  928A               	bcf	3978,1,c	;volatile
  2560                           
  2561                           ;motors.c: 24: LATBbits.LATB0 = 0;
  2562  0008D6  908A               	bcf	3978,0,c	;volatile
  2563                           
  2564                           ;motors.c: 25: LATCbits.LATC6 = 0;
  2565  0008D8  9C8B               	bcf	3979,6,c	;volatile
  2566                           
  2567                           ;motors.c: 26: LATCbits.LATC7 = 0;
  2568  0008DA  9E8B               	bcf	3979,7,c	;volatile
  2569                           
  2570                           ;motors.c: 28: TRISCbits.TRISC1 = 0;
  2571  0008DC  9294               	bcf	3988,1,c	;volatile
  2572                           
  2573                           ;motors.c: 29: TRISCbits.TRISC2 = 0;
  2574  0008DE  9494               	bcf	3988,2,c	;volatile
  2575                           
  2576                           ;motors.c: 33: PR2 = 149;
  2577  0008E0  0E95               	movlw	149
  2578  0008E2  6ECB               	movwf	4043,c	;volatile
  2579                           
  2580                           ;motors.c: 35: CCPR1L = 0;
  2581  0008E4  0E00               	movlw	0
  2582  0008E6  6EBE               	movwf	4030,c	;volatile
  2583                           
  2584                           ;motors.c: 36: CCPR2L = 0;
  2585  0008E8  0E00               	movlw	0
  2586  0008EA  6EBB               	movwf	4027,c	;volatile
  2587                           
  2588                           ;motors.c: 37: CCP1CONbits.DC1B = 0;
  2589  0008EC  0ECF               	movlw	-49
  2590  0008EE  16BD               	andwf	4029,f,c	;volatile
  2591                           
  2592                           ;motors.c: 38: CCP2CONbits.DC2B = 0;
  2593  0008F0  0ECF               	movlw	-49
  2594  0008F2  16BA               	andwf	4026,f,c	;volatile
  2595                           
  2596                           ;motors.c: 39: T2CON = 0x05;
  2597  0008F4  0E05               	movlw	5
  2598  0008F6  6ECA               	movwf	4042,c	;volatile
  2599                           
  2600                           ;motors.c: 40: CCP1CONbits.CCP1M = 0xF;
  2601  0008F8  80BD               	bsf	4029,0,c	;volatile
  2602  0008FA  82BD               	bsf	4029,1,c	;volatile
  2603  0008FC  84BD               	bsf	4029,2,c	;volatile
  2604  0008FE  86BD               	bsf	4029,3,c	;volatile
  2605                           
  2606                           ;motors.c: 41: CCP2CONbits.CCP2M = 0xF;
  2607  000900  80BA               	bsf	4026,0,c	;volatile
  2608  000902  82BA               	bsf	4026,1,c	;volatile
  2609  000904  84BA               	bsf	4026,2,c	;volatile
  2610  000906  86BA               	bsf	4026,3,c	;volatile
  2611  000908  0012               	return		;funcret
  2612  00090A                     __end_of_initMotors:
  2613                           	opt stack 0
  2614                           tblptru	equ	0xFF8
  2615                           intcon	equ	0xFF2
  2616                           postinc0	equ	0xFEE
  2617                           wreg	equ	0xFE8
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function _initInterrupts *****************
  2621 ;; Defined at:
  2622 ;;		line 4 in file "etc.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		None
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2636 ;;      Params:         0       0       0       0       0       0       0       0       0
  2637 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2638 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2639 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2640 ;;Total ram usage:        0 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    2
  2643 ;; This function calls:
  2644 ;;		Nothing
  2645 ;; This function is called by:
  2646 ;;		_loop
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text19
  2651  000AE4                     __ptext19:
  2652                           	opt stack 0
  2653  000AE4                     _initInterrupts:
  2654                           	opt stack 27
  2655                           
  2656                           ;etc.c: 5: INTCONbits.PEIE = 1;
  2657                           
  2658                           ;incstack = 0
  2659  000AE4  8CF2               	bsf	intcon,6,c	;volatile
  2660                           
  2661                           ;etc.c: 6: INTCONbits.GIE = 1;
  2662  000AE6  8EF2               	bsf	intcon,7,c	;volatile
  2663  000AE8  0012               	return		;funcret
  2664  000AEA                     __end_of_initInterrupts:
  2665                           	opt stack 0
  2666                           tblptru	equ	0xFF8
  2667                           intcon	equ	0xFF2
  2668                           postinc0	equ	0xFEE
  2669                           wreg	equ	0xFE8
  2670                           status	equ	0xFD8
  2671                           
  2672 ;; *************** function _initEtc *****************
  2673 ;; Defined at:
  2674 ;;		line 9 in file "etc.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;		None
  2677 ;; Auto vars:     Size  Location     Type
  2678 ;;		None
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  1    wreg      void 
  2681 ;; Registers used:
  2682 ;;		None
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2688 ;;      Params:         0       0       0       0       0       0       0       0       0
  2689 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2690 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2691 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2692 ;;Total ram usage:        0 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    2
  2695 ;; This function calls:
  2696 ;;		Nothing
  2697 ;; This function is called by:
  2698 ;;		_loop
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           	psect	text20
  2703  000AD4                     __ptext20:
  2704                           	opt stack 0
  2705  000AD4                     _initEtc:
  2706                           	opt stack 27
  2707                           
  2708                           ;etc.c: 10: ADCON1bits.PCFG = 0xF;
  2709                           
  2710                           ;incstack = 0
  2711  000AD4  80C1               	bsf	4033,0,c	;volatile
  2712  000AD6  82C1               	bsf	4033,1,c	;volatile
  2713  000AD8  84C1               	bsf	4033,2,c	;volatile
  2714  000ADA  86C1               	bsf	4033,3,c	;volatile
  2715  000ADC  0012               	return		;funcret
  2716  000ADE                     __end_of_initEtc:
  2717                           	opt stack 0
  2718                           tblptru	equ	0xFF8
  2719                           intcon	equ	0xFF2
  2720                           postinc0	equ	0xFEE
  2721                           wreg	equ	0xFE8
  2722                           status	equ	0xFD8
  2723                           
  2724 ;; *************** function _getLEDY *****************
  2725 ;; Defined at:
  2726 ;;		line 66 in file "ui.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      unsigned char 
  2733 ;; Registers used:
  2734 ;;		wreg
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2740 ;;      Params:         0       0       0       0       0       0       0       0       0
  2741 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2742 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2743 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2744 ;;Total ram usage:        0 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    2
  2747 ;; This function calls:
  2748 ;;		Nothing
  2749 ;; This function is called by:
  2750 ;;		_loop
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text21
  2755  000A8E                     __ptext21:
  2756                           	opt stack 0
  2757  000A8E                     _getLEDY:
  2758                           	opt stack 27
  2759                           
  2760                           ;ui.c: 67: return LATAbits.LATA3;
  2761                           
  2762                           ;incstack = 0
  2763  000A8E  A689               	btfss	3977,3,c	;volatile
  2764  000A90  D002               	goto	u330
  2765  000A92  0E01               	movlw	1
  2766  000A94  0012               	return	
  2767  000A96                     u330:
  2768  000A96  0E00               	movlw	0
  2769  000A98  0012               	return	
  2770  000A9A                     __end_of_getLEDY:
  2771                           	opt stack 0
  2772                           tblptru	equ	0xFF8
  2773                           intcon	equ	0xFF2
  2774                           postinc0	equ	0xFEE
  2775                           wreg	equ	0xFE8
  2776                           status	equ	0xFD8
  2777                           
  2778 ;; *************** function _getLEDR *****************
  2779 ;; Defined at:
  2780 ;;		line 62 in file "ui.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;		None
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      unsigned char 
  2787 ;; Registers used:
  2788 ;;		wreg
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2794 ;;      Params:         0       0       0       0       0       0       0       0       0
  2795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2797 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2798 ;;Total ram usage:        0 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    2
  2801 ;; This function calls:
  2802 ;;		Nothing
  2803 ;; This function is called by:
  2804 ;;		_loop
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text22
  2809  000A9A                     __ptext22:
  2810                           	opt stack 0
  2811  000A9A                     _getLEDR:
  2812                           	opt stack 27
  2813                           
  2814                           ;ui.c: 63: return LATAbits.LATA4;
  2815                           
  2816                           ;incstack = 0
  2817  000A9A  A889               	btfss	3977,4,c	;volatile
  2818  000A9C  D002               	goto	u320
  2819  000A9E  0E01               	movlw	1
  2820  000AA0  0012               	return	
  2821  000AA2                     u320:
  2822  000AA2  0E00               	movlw	0
  2823  000AA4  0012               	return	
  2824  000AA6                     __end_of_getLEDR:
  2825                           	opt stack 0
  2826                           tblptru	equ	0xFF8
  2827                           intcon	equ	0xFF2
  2828                           postinc0	equ	0xFEE
  2829                           wreg	equ	0xFE8
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function _getLEDG *****************
  2833 ;; Defined at:
  2834 ;;		line 70 in file "ui.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;		None
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;		None
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  1    wreg      unsigned char 
  2841 ;; Registers used:
  2842 ;;		wreg
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2848 ;;      Params:         0       0       0       0       0       0       0       0       0
  2849 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2851 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2852 ;;Total ram usage:        0 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; Hardware stack levels required when called:    2
  2855 ;; This function calls:
  2856 ;;		Nothing
  2857 ;; This function is called by:
  2858 ;;		_loop
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           	psect	text23
  2863  000AA6                     __ptext23:
  2864                           	opt stack 0
  2865  000AA6                     _getLEDG:
  2866                           	opt stack 27
  2867                           
  2868                           ;ui.c: 71: return LATAbits.LATA2;
  2869                           
  2870                           ;incstack = 0
  2871  000AA6  A489               	btfss	3977,2,c	;volatile
  2872  000AA8  D002               	goto	u340
  2873  000AAA  0E01               	movlw	1
  2874  000AAC  0012               	return	
  2875  000AAE                     u340:
  2876  000AAE  0E00               	movlw	0
  2877  000AB0  0012               	return	
  2878  000AB2                     __end_of_getLEDG:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           intcon	equ	0xFF2
  2882                           postinc0	equ	0xFEE
  2883                           wreg	equ	0xFE8
  2884                           status	equ	0xFD8
  2885                           
  2886 ;; *************** function _getIRs *****************
  2887 ;; Defined at:
  2888 ;;		line 48 in file "sensors.c"
  2889 ;; Parameters:    Size  Location     Type
  2890 ;;		None
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;		None
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      unsigned char 
  2895 ;; Registers used:
  2896 ;;		wreg, status,2
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2902 ;;      Params:         0       0       0       0       0       0       0       0       0
  2903 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2905 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2906 ;;Total ram usage:        1 bytes
  2907 ;; Hardware stack levels used:    1
  2908 ;; Hardware stack levels required when called:    2
  2909 ;; This function calls:
  2910 ;;		Nothing
  2911 ;; This function is called by:
  2912 ;;		_loop
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           	psect	text24
  2917  000960                     __ptext24:
  2918                           	opt stack 0
  2919  000960                     _getIRs:
  2920                           	opt stack 27
  2921                           
  2922                           ;sensors.c: 49: return LATBbits.LB2 && (PORTCbits.RC0 || PORTAbits.RA5 || PORTBbits.RB5 
      +                          || PORTCbits.RC5 || PORTCbits.RC4);
  2923                           
  2924                           ;incstack = 0
  2925  000960  0E00               	movlw	0
  2926  000962  6E0F               	movwf	_getIRs$1104,c
  2927  000964  A48A               	btfss	3978,2,c	;volatile
  2928  000966  D00A               	goto	l280
  2929  000968  A082               	btfss	3970,0,c	;volatile
  2930  00096A  BA80               	btfsc	3968,5,c	;volatile
  2931  00096C  D005               	goto	l1564
  2932  00096E  AA81               	btfss	3969,5,c	;volatile
  2933  000970  BA82               	btfsc	3970,5,c	;volatile
  2934  000972  D002               	goto	l1564
  2935  000974  A882               	btfss	3970,4,c	;volatile
  2936  000976  D002               	goto	l280
  2937  000978                     l1564:
  2938  000978  0E01               	movlw	1
  2939  00097A  6E0F               	movwf	_getIRs$1104,c
  2940  00097C                     l280:
  2941  00097C  500F               	movf	_getIRs$1104,w,c
  2942  00097E  0012               	return	
  2943  000980                     __end_of_getIRs:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           intcon	equ	0xFF2
  2947                           postinc0	equ	0xFEE
  2948                           wreg	equ	0xFE8
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _getIR *****************
  2952 ;; Defined at:
  2953 ;;		line 52 in file "sensors.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  n               1    wreg     unsigned char 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  n               1   14[COMRAM] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  1    wreg      unsigned char 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2, status,0
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2967 ;;      Params:         0       0       0       0       0       0       0       0       0
  2968 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2970 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2971 ;;Total ram usage:        1 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    2
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_loop
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text25
  2982  00085C                     __ptext25:
  2983                           	opt stack 0
  2984  00085C                     _getIR:
  2985                           	opt stack 27
  2986                           
  2987                           ;incstack = 0
  2988                           ;getIR@n stored from wreg
  2989  00085C  6E0F               	movwf	getIR@n,c
  2990                           
  2991                           ;sensors.c: 53: if(!LATBbits.LB2) return 0;
  2992  00085E  B48A               	btfsc	3978,2,c	;volatile
  2993  000860  D002               	goto	l1090
  2994  000862  0E00               	movlw	0
  2995  000864  0012               	return	
  2996  000866                     l1090:
  2997                           
  2998                           ;sensors.c: 54: if(n == 1) return PORTCbits.RC0;
  2999  000866  040F               	decf	getIR@n,w,c
  3000  000868  A4D8               	btfss	status,2,c
  3001  00086A  D006               	goto	l1096
  3002  00086C  A082               	btfss	3970,0,c	;volatile
  3003  00086E  D002               	goto	u410
  3004  000870  0E01               	movlw	1
  3005  000872  0012               	return	
  3006  000874                     u410:
  3007  000874  0E00               	movlw	0
  3008  000876  0012               	return	
  3009  000878                     l1096:
  3010                           
  3011                           ;sensors.c: 55: if(n == 2) return PORTAbits.RA5;
  3012  000878  0E02               	movlw	2
  3013  00087A  180F               	xorwf	getIR@n,w,c
  3014  00087C  A4D8               	btfss	status,2,c
  3015  00087E  D006               	goto	l1102
  3016  000880  AA80               	btfss	3968,5,c	;volatile
  3017  000882  D002               	goto	u430
  3018  000884  0E01               	movlw	1
  3019  000886  0012               	return	
  3020  000888                     u430:
  3021  000888  0E00               	movlw	0
  3022  00088A  0012               	return	
  3023  00088C                     l1102:
  3024                           
  3025                           ;sensors.c: 56: if(n == 3) return PORTBbits.RB5;
  3026  00088C  0E03               	movlw	3
  3027  00088E  180F               	xorwf	getIR@n,w,c
  3028  000890  A4D8               	btfss	status,2,c
  3029  000892  D006               	goto	l1108
  3030  000894  AA81               	btfss	3969,5,c	;volatile
  3031  000896  D002               	goto	u450
  3032  000898  0E01               	movlw	1
  3033  00089A  0012               	return	
  3034  00089C                     u450:
  3035  00089C  0E00               	movlw	0
  3036  00089E  0012               	return	
  3037  0008A0                     l1108:
  3038                           
  3039                           ;sensors.c: 57: if(n == 4) return PORTCbits.RC5;
  3040  0008A0  0E04               	movlw	4
  3041  0008A2  180F               	xorwf	getIR@n,w,c
  3042  0008A4  A4D8               	btfss	status,2,c
  3043  0008A6  D006               	goto	l1114
  3044  0008A8  AA82               	btfss	3970,5,c	;volatile
  3045  0008AA  D002               	goto	u470
  3046  0008AC  0E01               	movlw	1
  3047  0008AE  0012               	return	
  3048  0008B0                     u470:
  3049  0008B0  0E00               	movlw	0
  3050  0008B2  0012               	return	
  3051  0008B4                     l1114:
  3052                           
  3053                           ;sensors.c: 58: if(n == 5) return PORTCbits.RC4;
  3054  0008B4  0E05               	movlw	5
  3055  0008B6  180F               	xorwf	getIR@n,w,c
  3056  0008B8  A4D8               	btfss	status,2,c
  3057  0008BA  D006               	goto	l1120
  3058  0008BC  A882               	btfss	3970,4,c	;volatile
  3059  0008BE  D002               	goto	u490
  3060  0008C0  0E01               	movlw	1
  3061  0008C2  0012               	return	
  3062  0008C4                     u490:
  3063  0008C4  0E00               	movlw	0
  3064  0008C6  0012               	return	
  3065  0008C8                     l1120:
  3066                           
  3067                           ;sensors.c: 59: return 0;
  3068  0008C8  0E00               	movlw	0
  3069  0008CA  0012               	return	
  3070  0008CC                     __end_of_getIR:
  3071                           	opt stack 0
  3072                           tblptru	equ	0xFF8
  3073                           intcon	equ	0xFF2
  3074                           postinc0	equ	0xFEE
  3075                           wreg	equ	0xFE8
  3076                           status	equ	0xFD8
  3077                           
  3078 ;; *************** function _getCNYs *****************
  3079 ;; Defined at:
  3080 ;;		line 34 in file "sensors.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;		None
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;		None
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      unsigned char 
  3087 ;; Registers used:
  3088 ;;		wreg, status,2
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3094 ;;      Params:         0       0       0       0       0       0       0       0       0
  3095 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3097 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3098 ;;Total ram usage:        1 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    2
  3101 ;; This function calls:
  3102 ;;		Nothing
  3103 ;; This function is called by:
  3104 ;;		_loop
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           	psect	text26
  3109  000A28                     __ptext26:
  3110                           	opt stack 0
  3111  000A28                     _getCNYs:
  3112                           	opt stack 27
  3113                           
  3114                           ;sensors.c: 35: return PORTBbits.RB4 || PORTBbits.RB3;
  3115                           
  3116                           ;incstack = 0
  3117  000A28  0E01               	movlw	1
  3118  000A2A  6E0F               	movwf	_getCNYs$1090,c
  3119  000A2C  A881               	btfss	3969,4,c	;volatile
  3120  000A2E  B681               	btfsc	3969,3,c	;volatile
  3121  000A30  D002               	goto	l267
  3122  000A32  0E00               	movlw	0
  3123  000A34  6E0F               	movwf	_getCNYs$1090,c
  3124  000A36                     l267:
  3125  000A36  500F               	movf	_getCNYs$1090,w,c
  3126  000A38  0012               	return	
  3127  000A3A                     __end_of_getCNYs:
  3128                           	opt stack 0
  3129                           tblptru	equ	0xFF8
  3130                           intcon	equ	0xFF2
  3131                           postinc0	equ	0xFEE
  3132                           wreg	equ	0xFE8
  3133                           status	equ	0xFD8
  3134                           
  3135 ;; *************** function _getBTNs *****************
  3136 ;; Defined at:
  3137 ;;		line 46 in file "ui.c"
  3138 ;; Parameters:    Size  Location     Type
  3139 ;;		None
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;		None
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      unsigned char 
  3144 ;; Registers used:
  3145 ;;		wreg, status,2, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3151 ;;      Params:         0       0       0       0       0       0       0       0       0
  3152 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3154 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3155 ;;Total ram usage:        1 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    3
  3158 ;; This function calls:
  3159 ;;		_getBTN1
  3160 ;;		_getBTN2
  3161 ;; This function is called by:
  3162 ;;		_loop
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           	psect	text27
  3167  000980                     __ptext27:
  3168                           	opt stack 0
  3169  000980                     _getBTNs:
  3170                           	opt stack 26
  3171                           
  3172                           ;ui.c: 47: return getBTN1() || getBTN2();
  3173                           
  3174                           ;incstack = 0
  3175  000980  0E01               	movlw	1
  3176  000982  6E0F               	movwf	_getBTNs$716,c
  3177  000984  EC5F  F005         	call	_getBTN1	;wreg free
  3178  000988  0900               	iorlw	0
  3179  00098A  A4D8               	btfss	status,2,c
  3180  00098C  D007               	goto	l217
  3181  00098E  EC59  F005         	call	_getBTN2	;wreg free
  3182  000992  0900               	iorlw	0
  3183  000994  A4D8               	btfss	status,2,c
  3184  000996  D002               	goto	l217
  3185  000998  0E00               	movlw	0
  3186  00099A  6E0F               	movwf	_getBTNs$716,c
  3187  00099C                     l217:
  3188  00099C  500F               	movf	_getBTNs$716,w,c
  3189  00099E  0012               	return	
  3190  0009A0                     __end_of_getBTNs:
  3191                           	opt stack 0
  3192                           tblptru	equ	0xFF8
  3193                           intcon	equ	0xFF2
  3194                           postinc0	equ	0xFEE
  3195                           wreg	equ	0xFE8
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function _getBTN2 *****************
  3199 ;; Defined at:
  3200 ;;		line 42 in file "ui.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;		None
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;		None
  3205 ;; Return value:  Size  Location     Type
  3206 ;;                  1    wreg      unsigned char 
  3207 ;; Registers used:
  3208 ;;		wreg
  3209 ;; Tracked objects:
  3210 ;;		On entry : 0/0
  3211 ;;		On exit  : 0/0
  3212 ;;		Unchanged: 0/0
  3213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3214 ;;      Params:         0       0       0       0       0       0       0       0       0
  3215 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3216 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3217 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3218 ;;Total ram usage:        0 bytes
  3219 ;; Hardware stack levels used:    1
  3220 ;; Hardware stack levels required when called:    2
  3221 ;; This function calls:
  3222 ;;		Nothing
  3223 ;; This function is called by:
  3224 ;;		_loop
  3225 ;;		_getBTNs
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text28
  3230  000AB2                     __ptext28:
  3231                           	opt stack 0
  3232  000AB2                     _getBTN2:
  3233                           	opt stack 26
  3234                           
  3235                           ;ui.c: 43: return !PORTAbits.RA0;
  3236                           
  3237                           ;incstack = 0
  3238  000AB2  B080               	btfsc	3968,0,c	;volatile
  3239  000AB4  D002               	goto	u1210
  3240  000AB6  0E01               	movlw	1
  3241  000AB8  0012               	return	
  3242  000ABA                     u1210:
  3243  000ABA  0E00               	movlw	0
  3244  000ABC  0012               	return	
  3245  000ABE                     __end_of_getBTN2:
  3246                           	opt stack 0
  3247                           tblptru	equ	0xFF8
  3248                           intcon	equ	0xFF2
  3249                           postinc0	equ	0xFEE
  3250                           wreg	equ	0xFE8
  3251                           status	equ	0xFD8
  3252                           
  3253 ;; *************** function _getBTN1 *****************
  3254 ;; Defined at:
  3255 ;;		line 38 in file "ui.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;		None
  3258 ;; Auto vars:     Size  Location     Type
  3259 ;;		None
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  1    wreg      unsigned char 
  3262 ;; Registers used:
  3263 ;;		wreg
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3269 ;;      Params:         0       0       0       0       0       0       0       0       0
  3270 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3271 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3272 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3273 ;;Total ram usage:        0 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    2
  3276 ;; This function calls:
  3277 ;;		Nothing
  3278 ;; This function is called by:
  3279 ;;		_loop
  3280 ;;		_getBTNs
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text29
  3285  000ABE                     __ptext29:
  3286                           	opt stack 0
  3287  000ABE                     _getBTN1:
  3288                           	opt stack 26
  3289                           
  3290                           ;ui.c: 39: return !PORTAbits.RA1;
  3291                           
  3292                           ;incstack = 0
  3293  000ABE  B280               	btfsc	3968,1,c	;volatile
  3294  000AC0  D002               	goto	u1190
  3295  000AC2  0E01               	movlw	1
  3296  000AC4  0012               	return	
  3297  000AC6                     u1190:
  3298  000AC6  0E00               	movlw	0
  3299  000AC8  0012               	return	
  3300  000ACA                     __end_of_getBTN1:
  3301                           	opt stack 0
  3302                           tblptru	equ	0xFF8
  3303                           intcon	equ	0xFF2
  3304                           postinc0	equ	0xFEE
  3305                           wreg	equ	0xFE8
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function _ISR *****************
  3309 ;; Defined at:
  3310 ;;		line 233 in file "main.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;		None
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3324 ;;      Params:         0       0       0       0       0       0       0       0       0
  3325 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3326 ;;      Temps:         14       0       0       0       0       0       0       0       0
  3327 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3328 ;;Total ram usage:       14 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    1
  3331 ;; This function calls:
  3332 ;;		_timerInterrupt
  3333 ;; This function is called by:
  3334 ;;		Interrupt level 2
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	intcode
  3339  000008                     __pintcode:
  3340                           	opt stack 0
  3341  000008                     _ISR:
  3342                           	opt stack 25
  3343                           
  3344                           ;incstack = 0
  3345  000008  8236               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3346  00000A  CFFA F001          	movff	pclath,??_ISR
  3347  00000E  CFFB F002          	movff	pclatu,??_ISR+1
  3348  000012  EDF5  F003         	call	int_func,f	;refresh shadow registers
  3349                           pclatu	equ	0xFFB
  3350                           pclath	equ	0xFFA
  3351                           tblptru	equ	0xFF8
  3352                           intcon	equ	0xFF2
  3353                           postinc0	equ	0xFEE
  3354                           wreg	equ	0xFE8
  3355                           status	equ	0xFD8
  3356                           
  3357                           	psect	intcode_body
  3358  0007EA                     __pintcode_body:
  3359                           	opt stack 25
  3360  0007EA                     int_func:
  3361                           	opt stack 25
  3362  0007EA  0006               	pop		; remove dummy address from shadow register refresh
  3363  0007EC  CFE9 F003          	movff	fsr0l,??_ISR+2
  3364  0007F0  CFEA F004          	movff	fsr0h,??_ISR+3
  3365  0007F4  CFE1 F005          	movff	fsr1l,??_ISR+4
  3366  0007F8  CFE2 F006          	movff	fsr1h,??_ISR+5
  3367  0007FC  CFD9 F007          	movff	fsr2l,??_ISR+6
  3368  000800  CFDA F008          	movff	fsr2h,??_ISR+7
  3369  000804  CFF3 F009          	movff	prodl,??_ISR+8
  3370  000808  CFF4 F00A          	movff	prodh,??_ISR+9
  3371  00080C  CFF6 F00B          	movff	tblptrl,??_ISR+10
  3372  000810  CFF7 F00C          	movff	tblptrh,??_ISR+11
  3373  000814  CFF8 F00D          	movff	tblptru,??_ISR+12
  3374  000818  CFF5 F00E          	movff	tablat,??_ISR+13
  3375                           
  3376                           ;main.c: 234: if(timerInterrupt()) return;
  3377  00081C  EC85  F004         	call	_timerInterrupt	;wreg free
  3378  000820  C00E  FFF5         	movff	??_ISR+13,tablat
  3379  000824  C00D  FFF8         	movff	??_ISR+12,tblptru
  3380  000828  C00C  FFF7         	movff	??_ISR+11,tblptrh
  3381  00082C  C00B  FFF6         	movff	??_ISR+10,tblptrl
  3382  000830  C00A  FFF4         	movff	??_ISR+9,prodh
  3383  000834  C009  FFF3         	movff	??_ISR+8,prodl
  3384  000838  C008  FFDA         	movff	??_ISR+7,fsr2h
  3385  00083C  C007  FFD9         	movff	??_ISR+6,fsr2l
  3386  000840  C006  FFE2         	movff	??_ISR+5,fsr1h
  3387  000844  C005  FFE1         	movff	??_ISR+4,fsr1l
  3388  000848  C004  FFEA         	movff	??_ISR+3,fsr0h
  3389  00084C  C003  FFE9         	movff	??_ISR+2,fsr0l
  3390  000850  C002  FFFB         	movff	??_ISR+1,pclatu
  3391  000854  C001  FFFA         	movff	??_ISR,pclath
  3392  000858  9236               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3393  00085A  0011               	retfie		f
  3394  00085C                     __end_of_ISR:
  3395                           	opt stack 0
  3396                           pclatu	equ	0xFFB
  3397                           pclath	equ	0xFFA
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           intcon	equ	0xFF2
  3405                           postinc0	equ	0xFEE
  3406                           fsr0h	equ	0xFEA
  3407                           fsr0l	equ	0xFE9
  3408                           wreg	equ	0xFE8
  3409                           fsr1h	equ	0xFE2
  3410                           fsr1l	equ	0xFE1
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           
  3415 ;; *************** function _timerInterrupt *****************
  3416 ;; Defined at:
  3417 ;;		line 11 in file "timer.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;		None
  3422 ;; Return value:  Size  Location     Type
  3423 ;;                  1    wreg      unsigned char 
  3424 ;; Registers used:
  3425 ;;		wreg, status,2, status,0
  3426 ;; Tracked objects:
  3427 ;;		On entry : 0/0
  3428 ;;		On exit  : 0/0
  3429 ;;		Unchanged: 0/0
  3430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3431 ;;      Params:         0       0       0       0       0       0       0       0       0
  3432 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3433 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3434 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3435 ;;Total ram usage:        0 bytes
  3436 ;; Hardware stack levels used:    1
  3437 ;; This function calls:
  3438 ;;		Nothing
  3439 ;; This function is called by:
  3440 ;;		_ISR
  3441 ;; This function uses a non-reentrant model
  3442 ;;
  3443                           
  3444                           	psect	text31
  3445  00090A                     __ptext31:
  3446                           	opt stack 0
  3447  00090A                     _timerInterrupt:
  3448                           	opt stack 25
  3449                           
  3450                           ;timer.c: 12: if(!INTCONbits.TMR0IF) return 1;
  3451                           
  3452                           ;incstack = 0
  3453  00090A  B4F2               	btfsc	intcon,2,c	;volatile
  3454  00090C  D002               	goto	i2l1402
  3455  00090E  0E01               	movlw	1
  3456  000910  0012               	return	
  3457  000912                     i2l1402:
  3458                           
  3459                           ;timer.c: 13: fractionCounter += 680;
  3460  000912  0EA8               	movlw	168
  3461  000914  262F               	addwf	_fractionCounter,f,c
  3462  000916  0E02               	movlw	2
  3463  000918  2230               	addwfc	_fractionCounter+1,f,c
  3464                           
  3465                           ;timer.c: 14: if(1000 < fractionCounter){
  3466  00091A  0EE9               	movlw	233
  3467  00091C  5C2F               	subwf	_fractionCounter,w,c
  3468  00091E  0E03               	movlw	3
  3469  000920  5830               	subwfb	_fractionCounter+1,w,c
  3470  000922  A0D8               	btfss	status,0,c
  3471  000924  D00A               	goto	i2l1406
  3472                           
  3473                           ;timer.c: 15: fractionCounter -= 1000;
  3474  000926  0EE8               	movlw	232
  3475  000928  5E2F               	subwf	_fractionCounter,f,c
  3476  00092A  0E03               	movlw	3
  3477  00092C  5A30               	subwfb	_fractionCounter+1,f,c
  3478                           
  3479                           ;timer.c: 16: millisCounter++;
  3480  00092E  0E01               	movlw	1
  3481  000930  262B               	addwf	_millisCounter,f,c
  3482  000932  0E00               	movlw	0
  3483  000934  222C               	addwfc	_millisCounter+1,f,c
  3484  000936  222D               	addwfc	_millisCounter+2,f,c
  3485  000938  222E               	addwfc	_millisCounter+3,f,c
  3486  00093A                     i2l1406:
  3487                           
  3488                           ;timer.c: 17: }
  3489                           ;timer.c: 18: INTCONbits.TMR0IF = 0;
  3490  00093A  94F2               	bcf	intcon,2,c	;volatile
  3491                           
  3492                           ;timer.c: 19: return 0;
  3493  00093C  0E00               	movlw	0
  3494  00093E  0012               	return	
  3495  000940                     __end_of_timerInterrupt:
  3496                           	opt stack 0
  3497  0000                     pclatu	equ	0xFFB
  3498                           pclath	equ	0xFFA
  3499                           tblptru	equ	0xFF8
  3500                           tblptrh	equ	0xFF7
  3501                           tblptrl	equ	0xFF6
  3502                           tablat	equ	0xFF5
  3503                           prodh	equ	0xFF4
  3504                           prodl	equ	0xFF3
  3505                           intcon	equ	0xFF2
  3506                           postinc0	equ	0xFEE
  3507                           fsr0h	equ	0xFEA
  3508                           fsr0l	equ	0xFE9
  3509                           wreg	equ	0xFE8
  3510                           fsr1h	equ	0xFE2
  3511                           fsr1l	equ	0xFE1
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           pclatu	equ	0xFFB
  3516                           pclath	equ	0xFFA
  3517                           tblptru	equ	0xFF8
  3518                           tblptrh	equ	0xFF7
  3519                           tblptrl	equ	0xFF6
  3520                           tablat	equ	0xFF5
  3521                           prodh	equ	0xFF4
  3522                           prodl	equ	0xFF3
  3523                           intcon	equ	0xFF2
  3524                           postinc0	equ	0xFEE
  3525                           fsr0h	equ	0xFEA
  3526                           fsr0l	equ	0xFE9
  3527                           wreg	equ	0xFE8
  3528                           fsr1h	equ	0xFE2
  3529                           fsr1l	equ	0xFE1
  3530                           fsr2h	equ	0xFDA
  3531                           fsr2l	equ	0xFD9
  3532                           status	equ	0xFD8
  3533                           
  3534                           	psect	rparam
  3535  0000                     pclatu	equ	0xFFB
  3536                           pclath	equ	0xFFA
  3537                           tblptru	equ	0xFF8
  3538                           tblptrh	equ	0xFF7
  3539                           tblptrl	equ	0xFF6
  3540                           tablat	equ	0xFF5
  3541                           prodh	equ	0xFF4
  3542                           prodl	equ	0xFF3
  3543                           intcon	equ	0xFF2
  3544                           postinc0	equ	0xFEE
  3545                           fsr0h	equ	0xFEA
  3546                           fsr0l	equ	0xFE9
  3547                           wreg	equ	0xFE8
  3548                           fsr1h	equ	0xFE2
  3549                           fsr1l	equ	0xFE1
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554                           	psect	temp
  3555  000036                     btemp:
  3556                           	opt stack 0
  3557  000036                     	ds	1
  3558  0000                     int$flags	set	btemp
  3559                           pclatu	equ	0xFFB
  3560                           pclath	equ	0xFFA
  3561                           tblptru	equ	0xFF8
  3562                           tblptrh	equ	0xFF7
  3563                           tblptrl	equ	0xFF6
  3564                           tablat	equ	0xFF5
  3565                           prodh	equ	0xFF4
  3566                           prodl	equ	0xFF3
  3567                           intcon	equ	0xFF2
  3568                           postinc0	equ	0xFEE
  3569                           fsr0h	equ	0xFEA
  3570                           fsr0l	equ	0xFE9
  3571                           wreg	equ	0xFE8
  3572                           fsr1h	equ	0xFE2
  3573                           fsr1l	equ	0xFE1
  3574                           fsr2h	equ	0xFDA
  3575                           fsr2l	equ	0xFD9
  3576                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      53
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_loop
    _loop->_setMotors
    _setMotors->_setLeftMotor
    _setMotors->_setRightMotor
    _setLEDs->_setLEDG
    _setLEDs->_setLEDR
    _setLEDs->_setLEDY
    _setBothMotors->_setLeftMotor
    _setBothMotors->_setRightMotor
    _setRightMotor->___awdiv
    _setLeftMotor->___awdiv

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8201
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                12    12      0    8201
                                             30 COMRAM    12    12      0
                            _getBTN1
                            _getBTN2
                            _getBTNs
                            _getCNYs
                              _getIR
                             _getIRs
                            _getLEDG
                            _getLEDR
                            _getLEDY
                            _initEtc
                     _initInterrupts
                         _initMotors
                        _initSensors
                          _initTimer
                             _initUI
                             _millis
                          _newStatus
                      _setBothMotors
                            _setLEDG
                            _setLEDR
                            _setLEDY
                            _setLEDs
                          _setMotors
                          _setStatus
                           _switchIR
 ---------------------------------------------------------------------------------
 (2) _switchIR                                             2     2      0      15
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setStatus                                            2     0      2    1622
                                             14 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _setMotors                                            4     0      4    3094
                                             26 COMRAM     4     0      4
                       _setLeftMotor
                      _setRightMotor
 ---------------------------------------------------------------------------------
 (2) _setLEDs                                              3     1      2    1007
                                             15 COMRAM     3     1      2
                            _setLEDG
                            _setLEDR
                            _setLEDY
 ---------------------------------------------------------------------------------
 (3) _setLEDY                                              1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _setLEDR                                              1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _setLEDG                                              1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setBothMotors                                        2     0      2    1942
                                             26 COMRAM     2     0      2
                       _setLeftMotor
                      _setRightMotor
 ---------------------------------------------------------------------------------
 (3) _setRightMotor                                        4     2      2     885
                                             22 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) _setLeftMotor                                         4     2      2     885
                                             22 COMRAM     4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     556
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _newStatus                                            1     1      0      15
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _millis                                               4     0      4       0
                                             14 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _initUI                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTimer                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initSensors                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initInterrupts                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initEtc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getLEDY                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getLEDR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getLEDG                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getIRs                                               1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getIR                                                1     1      0      75
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getCNYs                                              1     1      0      24
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getBTNs                                              1     1      0      24
                                             14 COMRAM     1     1      0
                            _getBTN1
                            _getBTN2
 ---------------------------------------------------------------------------------
 (3) _getBTN2                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getBTN1                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0       0
                                              0 COMRAM    14    14      0
                     _timerInterrupt
 ---------------------------------------------------------------------------------
 (6) _timerInterrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _getBTN1
     _getBTN2
     _getBTNs
       _getBTN1
       _getBTN2
     _getCNYs
     _getIR
     _getIRs
     _getLEDG
     _getLEDR
     _getLEDY
     _initEtc
     _initInterrupts
     _initMotors
     _initSensors
     _initTimer
     _initUI
     _millis
     _newStatus
     _setBothMotors
       _setLeftMotor
         ___awdiv
       _setRightMotor
         ___awdiv
     _setLEDG
     _setLEDR
     _setLEDY
     _setLEDs
       _setLEDG
       _setLEDR
       _setLEDY
     _setMotors
       _setLeftMotor
         ___awdiv
       _setRightMotor
         ___awdiv
     _setStatus
     _switchIR

 _ISR (ROOT)
   _timerInterrupt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      35       1       56.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      35      20        0.0%
DATA                 0      0      35       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Mar 17 22:25:57 2018

           ___awdiv@sign 0014              __CFG_BORV$0 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l217 099C                      l280 097C                      l267 0A36  
           __CFG_CPB$OFF 000000                      u300 094E                      u320 0AA2  
                    u410 0874                      u330 0A96                      u340 0AAE  
                    u430 0888                      u318 0950                      _PR2 000FCB  
                    u450 089C             __CFG_CPD$OFF 000000                      u275 0A70  
                    u276 0A72                      _ISR 0008                      u285 0A62  
                    u470 08B0                      u286 0A64                      u295 0A7E  
                    u296 0A80                      u490 08C4             __CFG_BOR$OFF 000000  
                    wreg 000FE8             __CFG_LVP$OFF 000000                     ?_ISR 0001  
           __CFG_WDT$OFF 000000                     l1102 088C                     l1120 08C8  
                   l1114 08B4                     l1108 08A0                     l1090 0866  
                   l1500 06F8                     l1502 0700                     l1096 0878  
                   l1504 0708                     l1442 077A                     l1602 00BE  
                   l1612 00E0                     l1454 07A0                     l1470 07D2  
                   l1606 00C8                     l1456 07A8                     l1448 078A  
                   l1720 0396                     l1640 01B8                     l1474 07E0  
                   l1466 07C8                     l1458 07AC                     l1482 0626  
                   l1802 052E                     l1650 0210                     l1634 018C  
                   l1618 010C                     l1564 0978                     l1484 0636  
                   l1716 0388                     l1708 0366                     l1660 0246  
                   l1628 0174                     l1572 0040                     l1486 063E  
                   l1646 01F8                     l1590 007A                     l1822 0ADE  
                   l1488 0646                     l1808 0550                     l1752 041E  
                   l1744 03FC                     l1736 03DA                     l1728 03B8  
                   l1656 022E                     l1816 0572                     l1498 06E8  
                   l1770 047A                     l1764 044C                     l1692 0320  
                   l1684 0302                     l1676 02AA                     l1668 0266  
                   l1596 00A6                     l1790 04EA                     l1774 0498  
                   l1758 0432                     l1784 04C8                     l1778 04A6  
                   l1698 0338                     l1796 050C                     u1030 05E4  
                   u1110 06AE                     u1105 0650                     u1210 0ABA  
                   u1050 060A                     u1130 06D0                     u1051 0604  
                   u1131 06CA                     u1048 05E6                     u1128 06B0  
                   u1400 0148                     u1410 015A                     u1068 060C  
                   u1148 06D2                     u1420 015C                     u1190 0AC6  
                   u1430 016E                     u1440 0170                     u1185 0712  
                   u1550 02DA                     u1390 0146                     u1560 02DC  
                   u1480 01F2                     u1490 01F4    __end_of_setBothMotors 09EE  
                   _main 0ADE                     _loop 001A                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0036  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 0016            __CFG_IESO$OFF 000000             ___param_bank 000010  
       ??_timerInterrupt 0001           setMotors@right 001D                    ??_ISR 0001  
           ?_initSensors 0001            __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000  
                  ?_main 0001          __end_of___awdiv 07EA                    ?_loop 0001  
                  _T0CON 000FD5          ___awdiv@divisor 0011                    _T2CON 000FCA  
        ___awdiv@counter 0013            __CFG_USBDIV$2 000000          __end_of_getBTN1 0ACA  
        __end_of_getBTN2 0ABE          __end_of_getLEDG 0AB2          __end_of_getLEDR 0AA6  
        __end_of_getLEDY 0A9A          __end_of_getBTNs 09A0          __end_of_getCNYs 0A3A  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000                    _getIR 085C  
        __end_of_initEtc 0ADE          __end_of_setLEDG 0A82          __end_of_setLEDR 0A74  
        __end_of_setLEDY 0A66          __end_of_setLEDs 0A04                    tablat 000FF5  
                  status 000FD8           __CFG_MCLRE$OFF 000000          __initialization 09A0  
           __end_of_main 0AE4             __end_of_loop 05DA    __end_of_setRightMotor 0766  
                 ??_main 002B                   ??_loop 001F            __activetblptr 000002  
                 ?_getIR 0001                   _CCPR1L 000FBE                   _CCPR2L 000FBB  
       ___awdiv@dividend 000F                   i2l1402 0912                   i2l1406 093A  
        _fractionCounter 002F           __CFG_XINST$OFF 000000                ??___awdiv 0013  
                 _getIRs 0960                   _initUI 0A16                ??_getBTN1 000F  
              ??_getBTN2 000F                ??_getLEDG 000F                   getIR@n 000F  
              ??_getLEDR 000F                ??_getLEDY 000F                ??_getBTNs 000F  
                 _millis 0A04                ??_getCNYs 000F                   clear_0 09A6  
       ___awdiv@quotient 0015                   _status 0031                ??_initEtc 000F  
              ??_setLEDG 000F                ??_setLEDR 000F                ??_setLEDY 000F  
              ??_setLEDs 0012                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8             _getCNYs$1090 000F         __end_of_switchIR 0960  
             __accesstop 0060  __end_of__initialization 09AC          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001           __pcstackCOMRAM 0001            __end_of_getIR 08CC  
__size_of_initInterrupts 0006     __size_of_initSensors 0010            ?_setLeftMotor 0017  
                ??_getIR 000F       __size_of_initTimer 000A       __size_of_newStatus 000C  
                ?_getIRs 0001               _flagStatus 0035                  ?_initUI 0001  
     __size_of_setMotors 001A                  ?_millis 000F       __size_of_setStatus 000E  
         ??_setLeftMotor 0019          __CFG_VREGEN$OFF 000000                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 0766               _initMotors 08CC  
        __size_of_getIRs 0020                  _getBTN1 0ABE          __CFG_STVREN$OFF 000000  
                _getBTN2 0AB2                  _getLEDG 0AA6                  _getLEDR 0A9A  
                _getLEDY 0A8E                  _getBTNs 0980                  _getCNYs 0A28  
        __size_of_initUI 0012                  __pcinit 09A0                ?_switchIR 0001  
        __size_of_millis 0012                  __ramtop 0800                  __ptext0 0ADE  
                __ptext1 001A                  __ptext2 0940                  __ptext3 0A4A  
                __ptext4 09BA                  __ptext5 09EE                  __ptext6 0A58  
                __ptext7 0A66                  __ptext8 0A74                  __ptext9 09D4  
          _millisCounter 002B   __size_of_setBothMotors 001A             __size_of_ISR 0854  
      __end_of_initTimer 0AD4                  _initEtc 0AD4                  _setLEDG 0A74  
                _setLEDR 0A66                  _setLEDY 0A58                  _setLEDs 09EE  
      __end_of_newStatus 0A8E           __pintcode_body 07EA     end_of_initialization 09AC  
      __end_of_setMotors 09D4        __end_of_setStatus 0A58            __Lmediumconst 0000  
                int_func 07EA                  loop@now 0027           _initInterrupts 0AE4  
                postinc0 000FEE               ??_switchIR 000F                _PORTAbits 000F80  
              _PORTBbits 000F81                _PORTCbits 000F82  __size_of_timerInterrupt 0036  
              _TRISAbits 000F92                _TRISBbits 000F93                _TRISCbits 000F94  
 __size_of_setRightMotor 00C2            _setBothMotors 09D4              _CCP1CONbits 000FBD  
            _CCP2CONbits 000FBA   __end_of_initInterrupts 0AEA            setMotors@left 001B  
   __end_of_setLeftMotor 06A4              ?_initMotors 0001           __end_of_getIRs 0980  
         __end_of_initUI 0A28           __end_of_millis 0A16      start_initialization 09A0  
            __end_of_ISR 085C           ?_setBothMotors 001B          ?_initInterrupts 0001  
               ??_getIRs 000F            ??_initSensors 000F         __CFG_LPT1OSC$OFF 000000  
          _setRightMotor 06A4                 ??_initUI 000F                 ??_millis 0013  
            _getBTNs$716 000F              __pbssCOMRAM 002B               newStatus@x 000F  
            _getIRs$1104 000F      __size_of_initMotors 003E          _targetDirection 0033  
              __pintcode 0008                 ?___awdiv 000F           ?_setRightMotor 0017  
               ?_getBTN1 0001                 ?_getBTN2 0001                 ?_getLEDG 0001  
               ?_getLEDR 0001                 ?_getLEDY 0001                 ?_getBTNs 0001  
               ?_getCNYs 0001           _timerInterrupt 090A                 ?_initEtc 0001  
      __size_of_switchIR 0020                 ?_setLEDG 0001                 ?_setLEDR 0001  
               ?_setLEDY 0001                 ?_setLEDs 0010      __end_of_initSensors 0A4A  
             setStatus@s 000F                _initTimer 0ACA           __size_of_getIR 0070  
      setLeftMotor@speed 0017          ??_setBothMotors 001D                _newStatus 0A82  
               _LATAbits 000F89                 _LATBbits 000F8A                 _LATCbits 000F8B  
  __size_of_setLeftMotor 00CA                _setMotors 09BA                _setStatus 0A4A  
       __CFG_WDTPS$32768 000000   __end_of_timerInterrupt 0940               _ADCON1bits 000FC1  
             ?_initTimer 0001             _setLeftMotor 05DA               ?_newStatus 0001  
             ?_setMotors 001B               ?_setStatus 000F                 __Hrparam 0000  
               __Lrparam 0000          ??_setRightMotor 0019             ??_initMotors 000F  
       __size_of___awdiv 0084       setRightMotor@speed 0017              _initSensors 0A3A  
     setBothMotors@speed 001B          ?_timerInterrupt 0001         __size_of_getBTN1 000C  
       __size_of_getBTN2 000C         __size_of_getLEDG 000C         __size_of_getLEDR 000C  
       __size_of_getLEDY 000C         __size_of_getBTNs 0020         __size_of_getCNYs 0012  
       __size_of_initEtc 000A         __size_of_setLEDG 000E         __size_of_setLEDR 000E  
       __size_of_setLEDY 000E         __size_of_setLEDs 0016                 __ptext10 06A4  
               __ptext11 05DA                 __ptext20 0AD4                 __ptext12 0766  
               __ptext21 0A8E                 __ptext13 0A82                 __ptext22 0A9A  
               __ptext14 0A04                 __ptext31 090A                 __ptext23 0AA6  
               __ptext15 0A16                 __ptext24 0960                 __ptext16 0ACA  
               __ptext25 085C                 __ptext17 0A3A                 __ptext26 0A28  
               __ptext18 08CC                 __ptext27 0980                 __ptext19 0AE4  
               __ptext28 0AB2                 __ptext29 0ABE       __end_of_initMotors 090A  
       ??_initInterrupts 000F            __size_of_main 0006            __size_of_loop 05C0  
               int$flags 0036                 _switchIR 0940    __CFG_CPUDIV$OSC1_PLL2 000000  
             _INTCONbits 000FF2                 setLEDG@v 000F                 setLEDR@v 000F  
               setLEDY@v 000F              ??_initTimer 000F                 setLEDs@g 0011  
               setLEDs@r 0012                 setLEDs@y 0010              ??_newStatus 000F  
               intlevel2 0000                 loop@next 0023                switchIR@n 0010  
            ??_setMotors 001F              ??_setStatus 0011       __CFG_FOSC$HSPLL_HS 000000  
